{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Biblioth\u00e8que MVola API","text":"<p>Une biblioth\u00e8que Python robuste pour int\u00e9grer l'API de paiement mobile MVola \u00e0 Madagascar.</p>"},{"location":"#fonctionnalites","title":"Fonctionnalit\u00e9s","text":"<ul> <li>\u2705 API simple et intuitive pour l'int\u00e9gration des paiements MVola</li> <li>\u2705 Gestion automatique des tokens d'authentification</li> <li>\u2705 Support complet des op\u00e9rations de paiement marchand</li> <li>\u2705 Gestion compl\u00e8te des erreurs et validation des param\u00e8tres</li> <li>\u2705 Support de journalisation</li> <li>\u2705 Compatible avec les environnements sandbox et production</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install mvola-api\n</code></pre>"},{"location":"#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<pre><code>from mvola_api import MVolaClient\n\n# Initialiser le client\nclient = MVolaClient(\n    consumer_key=\"your_consumer_key\",\n    consumer_secret=\"your_consumer_secret\",\n    partner_name=\"Your Application Name\",\n    partner_msisdn=\"0340000000\",  # Votre num\u00e9ro marchand\n    sandbox=True  # Utiliser l'environnement sandbox\n)\n\n# G\u00e9n\u00e9rer un token\ntoken_data = client.generate_token()\nprint(f\"Token g\u00e9n\u00e9r\u00e9: {token_data['access_token'][:10]}...\")\n\n# Initier un paiement\nresult = client.initiate_payment(\n    amount=10000,\n    debit_msisdn=\"0343500003\",  # Num\u00e9ro du client\n    credit_msisdn=\"0343500004\",  # Num\u00e9ro du marchand\n    description=\"Paiement pour service\",\n    callback_url=\"https://example.com/callback\"\n)\n\n# Suivre l'ID de corr\u00e9lation du serveur pour les v\u00e9rifications de statut\nserver_correlation_id = result['response']['serverCorrelationId']\nprint(f\"Transaction initi\u00e9e avec l'ID de corr\u00e9lation: {server_correlation_id}\")\n\n# V\u00e9rifier le statut de la transaction\nstatus = client.get_transaction_status(server_correlation_id)\nprint(f\"Statut de la transaction: {status['response']['status']}\")\n</code></pre>"},{"location":"#tests-en-sandbox","title":"Tests en sandbox","text":"<p>Pour les tests en sandbox, utilisez les num\u00e9ros de t\u00e9l\u00e9phone de test suivants : - 0343500003 - 0343500004</p>"},{"location":"#structure-de-la-documentation","title":"Structure de la documentation","text":"<p>Cette documentation a \u00e9t\u00e9 structur\u00e9e selon le framework Di\u00e1taxis, qui organise l'information en quatre sections distinctes :</p> <ol> <li>Guides d'utilisation - Orient\u00e9s apprentissage, pour vous aider \u00e0 comprendre les concepts</li> <li>Exemples - Orient\u00e9s probl\u00e8mes, pour r\u00e9soudre des cas d'utilisation sp\u00e9cifiques</li> <li>R\u00e9f\u00e9rence API - Orient\u00e9s information, documentation technique d\u00e9taill\u00e9e</li> <li>Explication - Orient\u00e9s compr\u00e9hension, pour expliquer les choix et l'architecture</li> </ol>"},{"location":"#contribution","title":"Contribution","text":"<p>Les contributions sont les bienvenues ! Consultez notre guide de contribution pour plus d'informations.</p>"},{"location":"#licence","title":"Licence","text":"<p>Ce projet est sous licence MIT. </p>"},{"location":"changelog/","title":"Changelog","text":"<p>Toutes les modifications notables apport\u00e9es \u00e0 ce projet seront document\u00e9es dans ce fichier.</p> <p>Le format est bas\u00e9 sur Keep a Changelog, et ce projet adh\u00e8re au Semantic Versioning.</p>"},{"location":"changelog/#100-2024-07-24","title":"[1.0.0] - 2024-07-24","text":""},{"location":"changelog/#ajoute","title":"Ajout\u00e9","text":"<ul> <li>Premi\u00e8re version de la biblioth\u00e8que</li> <li>Module d'authentification avec gestion de tokens</li> <li>Module de transaction pour les paiements marchands</li> <li>Support des environnements sandbox et production</li> <li>Gestion compl\u00e8te des erreurs</li> <li>Documentation utilisateur et guide d'int\u00e9gration</li> <li>Exemples d'utilisation</li> </ul>"},{"location":"changelog/#change","title":"Chang\u00e9","text":"<ul> <li>N/A (premi\u00e8re version)</li> </ul>"},{"location":"changelog/#corrige","title":"Corrig\u00e9","text":"<ul> <li>N/A (premi\u00e8re version)</li> </ul>"},{"location":"changelog/#non-publie","title":"[Non publi\u00e9]","text":""},{"location":"changelog/#ajoute_1","title":"Ajout\u00e9","text":"<ul> <li>Structure initiale du projet</li> <li>Configuration de build avec pyproject.toml</li> <li>Framework de tests</li> <li>Documentation avec MkDocs </li> </ul>"},{"location":"contributing/","title":"Guide de contribution","text":"<p>Nous sommes ravis que vous souhaitiez contribuer \u00e0 la biblioth\u00e8que MVola API ! Ce document vous guidera \u00e0 travers le processus de contribution.</p>"},{"location":"contributing/#code-de-conduite","title":"Code de conduite","text":"<p>En participant \u00e0 ce projet, vous vous engagez \u00e0 maintenir un environnement respectueux et accueillant pour tous. Nous attendons de tous les contributeurs qu'ils se conforment aux principes suivants :</p> <ul> <li>Utiliser un langage accueillant et inclusif</li> <li>Respecter les diff\u00e9rents points de vue et exp\u00e9riences</li> <li>Accepter gracieusement les critiques constructives</li> <li>Se concentrer sur ce qui est le mieux pour la communaut\u00e9</li> <li>Faire preuve d'empathie envers les autres membres de la communaut\u00e9</li> </ul>"},{"location":"contributing/#comment-contribuer","title":"Comment contribuer","text":""},{"location":"contributing/#signaler-des-bugs","title":"Signaler des bugs","text":"<p>Si vous trouvez un bug, veuillez cr\u00e9er une issue sur GitHub avec les informations suivantes :</p> <ol> <li>Un titre clair et descriptif</li> <li>Une description d\u00e9taill\u00e9e du probl\u00e8me</li> <li>Les \u00e9tapes pour reproduire le bug</li> <li>Le comportement attendu vs. le comportement observ\u00e9</li> <li>Toute information suppl\u00e9mentaire (environnement, logs, etc.)</li> </ol>"},{"location":"contributing/#proposer-des-ameliorations","title":"Proposer des am\u00e9liorations","text":"<p>Pour proposer une am\u00e9lioration, cr\u00e9ez une issue en incluant :</p> <ol> <li>Une description claire de l'am\u00e9lioration propos\u00e9e</li> <li>La justification de cette am\u00e9lioration (pourquoi est-elle utile ?)</li> <li>Si possible, un exemple de code ou une esquisse de l'impl\u00e9mentation</li> </ol>"},{"location":"contributing/#contribution-au-code","title":"Contribution au code","text":"<ol> <li>Fork le d\u00e9p\u00f4t sur GitHub</li> <li>Clone votre fork sur votre machine locale</li> <li>Cr\u00e9ez une branche pour votre contribution (<code>git checkout -b feature/ma-fonctionnalite</code>)</li> <li>Modifiez le code en suivant les conventions du projet</li> <li>Testez vos modifications</li> <li>Committez vos changements (<code>git commit -m \"Ajout de ma fonctionnalit\u00e9\"</code>)</li> <li>Poussez votre branche sur GitHub (<code>git push origin feature/ma-fonctionnalite</code>)</li> <li>Cr\u00e9ez une Pull Request sur le d\u00e9p\u00f4t original</li> </ol>"},{"location":"contributing/#processus-de-developpement","title":"Processus de d\u00e9veloppement","text":""},{"location":"contributing/#environnement-de-developpement","title":"Environnement de d\u00e9veloppement","text":"<p>Pour configurer votre environnement de d\u00e9veloppement :</p> <pre><code># Cloner le d\u00e9p\u00f4t\ngit clone https://github.com/Niainarisoa01/Mvlola_API_Lib.git\ncd Mvlola_API_Lib\n\n# Installer les d\u00e9pendances de d\u00e9veloppement\npip install -e \".[dev]\"\n</code></pre>"},{"location":"contributing/#executer-les-tests","title":"Ex\u00e9cuter les tests","text":"<pre><code># Ex\u00e9cuter tous les tests\npytest\n\n# Ex\u00e9cuter les tests avec couverture\npytest --cov=mvola_api\n</code></pre>"},{"location":"contributing/#style-de-code","title":"Style de code","text":"<p>Nous utilisons les outils suivants pour maintenir un style de code coh\u00e9rent :</p> <ul> <li>Black pour le formatage de code</li> <li>isort pour trier les imports</li> <li>flake8 pour la v\u00e9rification de style</li> </ul> <p>Vous pouvez les ex\u00e9cuter avec :</p> <pre><code># Formater le code\nblack mvola_api tests\n\n# Trier les imports\nisort mvola_api tests\n\n# V\u00e9rifier le style\nflake8 mvola_api tests\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>La documentation est g\u00e9n\u00e9r\u00e9e avec MkDocs et mkdocstrings :</p> <pre><code># Installer les d\u00e9pendances de documentation\npip install -e \".[docs]\"\n\n# Servir la documentation localement\nmkdocs serve\n\n# Construire la documentation\nmkdocs build\n</code></pre>"},{"location":"contributing/#conventions-de-commit","title":"Conventions de commit","text":"<p>Nous suivons une convention de messages de commit simple :</p> <ul> <li><code>feat:</code> pour une nouvelle fonctionnalit\u00e9</li> <li><code>fix:</code> pour une correction de bug</li> <li><code>docs:</code> pour les modifications de documentation</li> <li><code>style:</code> pour les changements de formatage</li> <li><code>refactor:</code> pour les refactorisations de code</li> <li><code>test:</code> pour l'ajout ou la modification de tests</li> <li><code>chore:</code> pour les t\u00e2ches de maintenance</li> </ul> <p>Exemple : <code>feat: Ajout de la fonctionnalit\u00e9 de paiement par callback</code></p>"},{"location":"contributing/#versionnement","title":"Versionnement","text":"<p>Nous suivons le Semantic Versioning :</p> <ul> <li>MAJOR pour les changements incompatibles</li> <li>MINOR pour les ajouts de fonctionnalit\u00e9s r\u00e9trocompatibles</li> <li>PATCH pour les corrections de bugs r\u00e9trocompatibles</li> </ul>"},{"location":"contributing/#processus-de-revue","title":"Processus de revue","text":"<p>Lorsque vous soumettez une Pull Request, un mainteneur du projet la passera en revue. Le processus peut inclure des demandes de modifications ou des discussions sur l'impl\u00e9mentation.</p> <p>Pour faciliter la revue :</p> <ol> <li>Assurez-vous que tous les tests passent</li> <li>Documentez les nouvelles fonctionnalit\u00e9s</li> <li>Maintenez vos Pull Requests focalis\u00e9es sur une seule fonctionnalit\u00e9/correction</li> </ol>"},{"location":"contributing/#remerciements","title":"Remerciements","text":"<p>Un grand merci \u00e0 tous les contributeurs qui aident \u00e0 am\u00e9liorer cette biblioth\u00e8que ! </p>"},{"location":"api-reference/auth/","title":"R\u00e9f\u00e9rence du module d'authentification","text":"<p>Le module d'authentification <code>mvola_api.auth</code> g\u00e8re l'authentification aupr\u00e8s de l'API MVola en utilisant OAuth 2.0. Il s'occupe de la g\u00e9n\u00e9ration, du stockage et du rafra\u00eechissement des tokens d'acc\u00e8s.</p>"},{"location":"api-reference/auth/#classe-mvolaauth","title":"Classe MVolaAuth","text":"<p>La classe <code>MVolaAuth</code> est responsable de toutes les op\u00e9rations li\u00e9es \u00e0 l'authentification aupr\u00e8s de l'API MVola.</p>"},{"location":"api-reference/auth/#initialisation","title":"Initialisation","text":"<pre><code>from mvola_api.auth import MVolaAuth\n\nauth = MVolaAuth(\n    consumer_key=\"votre_consumer_key\",\n    consumer_secret=\"votre_consumer_secret\",\n    sandbox=True  # Utiliser False pour l'environnement de production\n)\n</code></pre>"},{"location":"api-reference/auth/#generation-dun-token","title":"G\u00e9n\u00e9ration d'un token","text":"<pre><code># G\u00e9n\u00e9rer un nouveau token\nauth_token = auth.generate_token()\n\n# Le token est un dictionnaire contenant:\n# - access_token: Le token d'acc\u00e8s \u00e0 utiliser dans les requ\u00eates\n# - token_type: Le type de token (g\u00e9n\u00e9ralement \"Bearer\")\n# - expires_in: Dur\u00e9e de validit\u00e9 du token en secondes\n# - expires_at: Timestamp de l'expiration du token (ajout\u00e9 par la biblioth\u00e8que)\n\nprint(f\"Token d'acc\u00e8s: {auth_token['access_token']}\")\nprint(f\"Expire dans: {auth_token['expires_in']} secondes\")\n</code></pre>"},{"location":"api-reference/auth/#verification-et-rafraichissement-automatique-du-token","title":"V\u00e9rification et rafra\u00eechissement automatique du token","text":"<pre><code># Obtenir un token valide (g\u00e9n\u00e8re un nouveau token si n\u00e9cessaire)\ntoken = auth.get_valid_token()\n\n# Cette m\u00e9thode v\u00e9rifie si un token existe d\u00e9j\u00e0 et s'il est encore valide\n# Si le token est expir\u00e9 ou n'existe pas, un nouveau token est g\u00e9n\u00e9r\u00e9\n</code></pre>"},{"location":"api-reference/auth/#utilisation-manuelle-du-token","title":"Utilisation manuelle du token","text":"<pre><code># V\u00e9rifier si un token est expir\u00e9\nis_expired = auth.is_token_expired()\n\n# Rafra\u00eechir manuellement le token\nauth.refresh_token()\n\n# Obtenir l'en-t\u00eate d'autorisation format\u00e9 pour les requ\u00eates HTTP\nauth_header = auth.get_auth_header()\n# Retourne: {\"Authorization\": \"Bearer votre_token_d_acces\"}\n</code></pre>"},{"location":"api-reference/auth/#exceptions-dauthentification","title":"Exceptions d'authentification","text":"<p>Le module d'authentification peut lever les exceptions suivantes :</p> <ul> <li><code>MVolaAuthError</code>: Exception de base pour les erreurs d'authentification</li> <li><code>MVolaInvalidCredentialsError</code>: Lev\u00e9e lorsque les identifiants (consumer_key, consumer_secret) sont invalides</li> <li><code>MVolaTokenExpiredError</code>: Lev\u00e9e lorsqu'un token a expir\u00e9 et qu'une op\u00e9ration tente de l'utiliser</li> </ul> <pre><code>from mvola_api.exceptions import MVolaAuthError, MVolaInvalidCredentialsError, MVolaTokenExpiredError\n\ntry:\n    token = auth.generate_token()\nexcept MVolaInvalidCredentialsError as e:\n    print(f\"Erreur d'identifiants: {e}\")\nexcept MVolaAuthError as e:\n    print(f\"Erreur d'authentification: {e}\")\n</code></pre>"},{"location":"api-reference/auth/#fonctionnement-interne","title":"Fonctionnement interne","text":""},{"location":"api-reference/auth/#endpoints-dauthentification","title":"Endpoints d'authentification","text":"<p>Le module utilise diff\u00e9rents endpoints en fonction de l'environnement:</p> <ul> <li>Sandbox: <code>https://api-uat.orange.mg/oauth/token</code></li> <li>Production: <code>https://api.orange.mg/oauth/token</code></li> </ul>"},{"location":"api-reference/auth/#format-de-la-requete-dauthentification","title":"Format de la requ\u00eate d'authentification","text":"<pre><code># Requ\u00eate POST avec les param\u00e8tres suivants:\nheaders = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Authorization\": \"Basic {credentials_b64}\"  # Base64(consumer_key:consumer_secret)\n}\n\ndata = {\n    \"grant_type\": \"client_credentials\"\n}\n</code></pre>"},{"location":"api-reference/auth/#stockage-du-token","title":"Stockage du token","text":"<p>Le token est stock\u00e9 en m\u00e9moire, dans l'instance de la classe <code>MVolaAuth</code>. Il n'est pas persistant entre les red\u00e9marrages de l'application. Si vous avez besoin de persistance, vous devez impl\u00e9menter votre propre m\u00e9canisme de stockage.</p>"},{"location":"api-reference/auth/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li> <p>S\u00e9curit\u00e9: Ne stockez jamais les cl\u00e9s d'API (consumer_key, consumer_secret) directement dans le code. Utilisez des variables d'environnement ou un syst\u00e8me de gestion de secrets.</p> </li> <li> <p>Gestion des tokens: Laissez la biblioth\u00e8que g\u00e9rer automatiquement les tokens avec <code>get_valid_token()</code> plut\u00f4t que de les g\u00e9rer manuellement.</p> </li> <li> <p>Environnement de test: Commencez toujours par l'environnement sandbox (<code>sandbox=True</code>) avant de passer \u00e0 la production.</p> </li> <li> <p>Gestion des erreurs: Impl\u00e9mentez une gestion d'erreurs robuste autour des appels d'authentification, car ils peuvent \u00e9chouer pour diverses raisons (r\u00e9seau, identifiants invalides, etc.).</p> </li> </ol>"},{"location":"api-reference/auth/#voir-aussi","title":"Voir aussi","text":"<ul> <li>Guide d'authentification - Guide complet sur l'authentification avec MVola</li> <li>R\u00e9f\u00e9rence MVolaClient - Documentation de la classe principale qui utilise MVolaAuth</li> <li>Gestion des erreurs - Comment g\u00e9rer les erreurs d'authentification</li> </ul>"},{"location":"api-reference/client/","title":"Client MVola API","text":"<p>Le <code>MVolaClient</code> est la classe principale qui vous permet d'interagir avec l'API MVola. Il encapsule les fonctionnalit\u00e9s des modules d'authentification et de transaction, offrant une interface unifi\u00e9e et simple pour effectuer des op\u00e9rations avec l'API MVola.</p>"},{"location":"api-reference/client/#classe-mvolaclient","title":"Classe MVolaClient","text":"<p>La classe <code>MVolaClient</code> est le point d'entr\u00e9e principal pour l'utilisation de la biblioth\u00e8que MVola API.</p>"},{"location":"api-reference/client/#initialisation","title":"Initialisation","text":"<pre><code>from mvola_api import MVolaClient\n\n# Initialisation pour l'environnement sandbox (d\u00e9veloppement)\nclient = MVolaClient(\n    consumer_key=\"votre_consumer_key\",\n    consumer_secret=\"votre_consumer_secret\",\n    partner_name=\"Nom de votre application\",\n    partner_msisdn=\"0343500003\",  # Votre num\u00e9ro MVola\n    sandbox=True  # Pour l'environnement de test\n)\n\n# Initialisation pour l'environnement de production\nprod_client = MVolaClient(\n    consumer_key=\"votre_consumer_key_prod\",\n    consumer_secret=\"votre_consumer_secret_prod\",\n    partner_name=\"Nom de votre application\",\n    partner_msisdn=\"0343500003\",  # Votre num\u00e9ro MVola\n    sandbox=False  # Pour l'environnement de production\n)\n</code></pre>"},{"location":"api-reference/client/#utilisation-dun-logger-personnalise","title":"Utilisation d'un logger personnalis\u00e9","text":"<p>Vous pouvez fournir votre propre logger pour surveiller les op\u00e9rations :</p> <pre><code>import logging\n\n# Configurer un logger personnalis\u00e9\nlogger = logging.getLogger(\"mvola_custom_logger\")\nhandler = logging.StreamHandler()\nhandler.setFormatter(logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"))\nlogger.addHandler(handler)\nlogger.setLevel(logging.DEBUG)\n\n# Utiliser le logger personnalis\u00e9\nclient = MVolaClient(\n    consumer_key=\"votre_consumer_key\",\n    consumer_secret=\"votre_consumer_secret\",\n    partner_name=\"Nom de votre application\",\n    partner_msisdn=\"0343500003\",\n    sandbox=True,\n    logger=logger  # Fournir votre logger personnalis\u00e9\n)\n</code></pre>"},{"location":"api-reference/client/#methodes-principales","title":"M\u00e9thodes principales","text":""},{"location":"api-reference/client/#gestion-des-tokens","title":"Gestion des tokens","text":"<pre><code># G\u00e9n\u00e9rer un token d'authentification\ntoken = client.generate_token()\nprint(f\"Token: {token['access_token']}\")\nprint(f\"Expire dans: {token['expires_in']} secondes\")\n\n# V\u00e9rifier si un token est expir\u00e9\nis_expired = client.is_token_expired()\nprint(f\"Token expir\u00e9: {is_expired}\")\n\n# Rafra\u00eechir manuellement le token\nclient.refresh_token()\n</code></pre>"},{"location":"api-reference/client/#operations-de-transaction","title":"Op\u00e9rations de transaction","text":"<pre><code># Initier un paiement\ntransaction_info = client.initiate_payment(\n    amount=1000,\n    debit_msisdn=\"0343500003\",  # Num\u00e9ro qui paie\n    credit_msisdn=\"0343500004\",  # Num\u00e9ro qui re\u00e7oit\n    reference=\"REF123456\",       # R\u00e9f\u00e9rence unique\n    description=\"Paiement pour produit ABC\",\n    callback_url=\"https://example.com/callback\"  # Optionnel\n)\n\n# R\u00e9cup\u00e9rer l'ID de transaction\ntransaction_id = transaction_info.get('server_correlation_id')\n\n# V\u00e9rifier le statut d'une transaction\nstatus = client.get_transaction_status(\n    transaction_id=transaction_id,\n    msisdn=\"0343500003\"\n)\nprint(f\"Statut: {status.get('status')}\")\n\n# R\u00e9cup\u00e9rer les d\u00e9tails d'une transaction\ndetails = client.get_transaction_details(transaction_id=transaction_id)\nprint(f\"D\u00e9tails: {details}\")\n</code></pre>"},{"location":"api-reference/client/#notes-importantes","title":"Notes importantes","text":"<ol> <li> <p>Gestion des tokens : Le client g\u00e8re automatiquement les tokens d'authentification, en les g\u00e9n\u00e9rant et les rafra\u00eechissant au besoin. Vous n'avez normalement pas besoin d'appeler explicitement <code>generate_token()</code> ou <code>refresh_token()</code>.</p> </li> <li> <p>Environnements : Utilisez toujours l'environnement sandbox (<code>sandbox=True</code>) pour les tests avant de passer \u00e0 la production.</p> </li> <li> <p>Num\u00e9ros de t\u00e9l\u00e9phone : Les num\u00e9ros de t\u00e9l\u00e9phone doivent \u00eatre au format national (ex: 034XXXXXXX, 038XXXXXXX)</p> </li> <li> <p>R\u00e9f\u00e9rences de transaction : G\u00e9n\u00e9rez toujours des r\u00e9f\u00e9rences uniques pour chaque transaction.</p> </li> <li> <p>Gestion des erreurs : Utilisez la gestion d'exceptions appropri\u00e9e pour capturer et traiter les diff\u00e9rentes erreurs qui peuvent survenir.</p> </li> </ol>"},{"location":"api-reference/client/#voir-aussi","title":"Voir aussi","text":"<ul> <li>Guide d'authentification - Guide complet sur l'authentification</li> <li>Guide des transactions - Guide complet sur les transactions</li> <li>R\u00e9f\u00e9rence d'authentification - Documentation d\u00e9taill\u00e9e du module d'authentification</li> <li>R\u00e9f\u00e9rence de transaction - Documentation d\u00e9taill\u00e9e du module de transaction </li> </ul>"},{"location":"api-reference/exceptions/","title":"R\u00e9f\u00e9rence des exceptions","text":"<p>Le module <code>mvola_api.exceptions</code> d\u00e9finit toutes les exceptions sp\u00e9cifiques \u00e0 la biblioth\u00e8que MVola API. Ces exceptions vous permettent de g\u00e9rer pr\u00e9cis\u00e9ment les diff\u00e9rents types d'erreurs qui peuvent survenir lors de l'utilisation de l'API.</p>"},{"location":"api-reference/exceptions/#hierarchie-des-exceptions","title":"Hi\u00e9rarchie des exceptions","text":"<p>La biblioth\u00e8que utilise une hi\u00e9rarchie d'exceptions pour vous permettre de capturer des cat\u00e9gories sp\u00e9cifiques d'erreurs :</p> <pre><code>MVolaError (Exception de base)\n\u251c\u2500\u2500 MVolaAuthError (Erreurs d'authentification)\n\u2502   \u251c\u2500\u2500 MVolaInvalidCredentialsError\n\u2502   \u2514\u2500\u2500 MVolaTokenExpiredError\n\u251c\u2500\u2500 MVolaTransactionError (Erreurs de transaction)\n\u2502   \u251c\u2500\u2500 MVolaTransactionValidationError\n\u2502   \u251c\u2500\u2500 MVolaTransactionStatusError\n\u2502   \u2514\u2500\u2500 MVolaTransactionCreationError\n\u251c\u2500\u2500 MVolaValidationError (Erreurs de validation)\n\u2502   \u2514\u2500\u2500 MVolaInvalidParameterError\n\u251c\u2500\u2500 MVolaConnectionError (Erreurs de connexion)\n\u2502   \u251c\u2500\u2500 MVolaRequestTimeoutError\n\u2502   \u2514\u2500\u2500 MVolaServerError\n\u2514\u2500\u2500 MVolaConfigError (Erreurs de configuration)\n</code></pre>"},{"location":"api-reference/exceptions/#exception-de-base","title":"Exception de base","text":"<p><code>MVolaError</code></p> <p>Cette classe est l'exception de base pour toutes les erreurs sp\u00e9cifiques \u00e0 la biblioth\u00e8que MVola API. Elle \u00e9tend la classe <code>Exception</code> standard de Python et ajoute des fonctionnalit\u00e9s suppl\u00e9mentaires pour la gestion des erreurs.</p> <pre><code>try:\n    # Code utilisant MVola API\nexcept mvola_api.exceptions.MVolaError as e:\n    print(f\"Une erreur MVola s'est produite: {e}\")\n    print(f\"D\u00e9tails suppl\u00e9mentaires: {e.details}\")\n</code></pre>"},{"location":"api-reference/exceptions/#exceptions-dauthentification","title":"Exceptions d'authentification","text":"<p><code>MVolaAuthError</code></p> <p>Cette classe repr\u00e9sente les erreurs li\u00e9es \u00e0 l'authentification avec l'API MVola.</p>"},{"location":"api-reference/exceptions/#mvolainvalidcredentialserror","title":"MVolaInvalidCredentialsError","text":"<p>Lev\u00e9e lorsque les identifiants fournis (consumer_key, consumer_secret) sont invalides ou incorrects.</p> <pre><code>try:\n    auth.generate_token()\nexcept mvola_api.exceptions.MVolaInvalidCredentialsError as e:\n    print(f\"Identifiants invalides: {e}\")\n    print(f\"Code d'erreur: {e.error_code}\")\n</code></pre>"},{"location":"api-reference/exceptions/#mvolatokenexpirederror","title":"MVolaTokenExpiredError","text":"<p>Lev\u00e9e lorsqu'un token d'authentification a expir\u00e9 et qu'une op\u00e9ration tente de l'utiliser.</p> <pre><code>try:\n    transaction.initiate_payment(...)\nexcept mvola_api.exceptions.MVolaTokenExpiredError as e:\n    print(f\"Token expir\u00e9: {e}\")\n    # Rafra\u00eechir le token et r\u00e9essayer\n    auth.refresh_token()\n    transaction.initiate_payment(...)\n</code></pre>"},{"location":"api-reference/exceptions/#exceptions-de-transaction","title":"Exceptions de transaction","text":"<p><code>MVolaTransactionError</code></p> <p>Cette classe repr\u00e9sente les erreurs qui se produisent lors des op\u00e9rations de transaction.</p>"},{"location":"api-reference/exceptions/#mvolatransactionvalidationerror","title":"MVolaTransactionValidationError","text":"<p>Lev\u00e9e lorsque les donn\u00e9es de transaction ne passent pas la validation (montant incorrect, num\u00e9ro de t\u00e9l\u00e9phone invalide, etc.).</p> <pre><code>try:\n    transaction.initiate_payment(amount=-100, ...)  # Montant n\u00e9gatif\nexcept mvola_api.exceptions.MVolaTransactionValidationError as e:\n    print(f\"Erreur de validation: {e}\")\n    print(f\"Champ en erreur: {e.field}\")\n    print(f\"D\u00e9tails: {e.details}\")\n</code></pre>"},{"location":"api-reference/exceptions/#mvolatransactionstatuserror","title":"MVolaTransactionStatusError","text":"<p>Lev\u00e9e lorsqu'une erreur se produit pendant la v\u00e9rification du statut d'une transaction.</p> <pre><code>try:\n    transaction.get_transaction_status(transaction_id=\"id-inexistant\", ...)\nexcept mvola_api.exceptions.MVolaTransactionStatusError as e:\n    print(f\"Erreur de statut: {e}\")\n    print(f\"ID de transaction: {e.transaction_id}\")\n</code></pre>"},{"location":"api-reference/exceptions/#mvolatransactioncreationerror","title":"MVolaTransactionCreationError","text":"<p>Lev\u00e9e lorsqu'une erreur se produit pendant la cr\u00e9ation d'une transaction.</p> <pre><code>try:\n    transaction.initiate_payment(...)\nexcept mvola_api.exceptions.MVolaTransactionCreationError as e:\n    print(f\"Erreur lors de la cr\u00e9ation de la transaction: {e}\")\n    print(f\"D\u00e9tails: {e.details}\")\n</code></pre>"},{"location":"api-reference/exceptions/#exceptions-de-validation","title":"Exceptions de validation","text":"<p><code>MVolaValidationError</code></p> <p>Cette classe repr\u00e9sente les erreurs de validation des param\u00e8tres et donn\u00e9es.</p>"},{"location":"api-reference/exceptions/#mvolainvalidparametererror","title":"MVolaInvalidParameterError","text":"<p>Lev\u00e9e lorsqu'un param\u00e8tre fourni est invalide pour une op\u00e9ration.</p> <pre><code>try:\n    client = MVolaClient(consumer_key=None, ...)  # consumer_key manquant\nexcept mvola_api.exceptions.MVolaInvalidParameterError as e:\n    print(f\"Param\u00e8tre invalide: {e}\")\n    print(f\"Nom du param\u00e8tre: {e.parameter_name}\")\n    print(f\"Raison: {e.reason}\")\n</code></pre>"},{"location":"api-reference/exceptions/#exceptions-de-connexion","title":"Exceptions de connexion","text":"<p><code>MVolaConnectionError</code></p> <p>Cette classe repr\u00e9sente les erreurs de connexion \u00e0 l'API MVola.</p>"},{"location":"api-reference/exceptions/#mvolarequesttimeouterror","title":"MVolaRequestTimeoutError","text":"<p>Lev\u00e9e lorsqu'une requ\u00eate d\u00e9passe le d\u00e9lai d'attente configur\u00e9.</p> <pre><code>try:\n    transaction.initiate_payment(...)\nexcept mvola_api.exceptions.MVolaRequestTimeoutError as e:\n    print(f\"D\u00e9lai d'attente d\u00e9pass\u00e9: {e}\")\n    print(f\"URL: {e.url}\")\n    print(f\"Temps \u00e9coul\u00e9: {e.timeout} secondes\")\n</code></pre>"},{"location":"api-reference/exceptions/#mvolaservererror","title":"MVolaServerError","text":"<p>Lev\u00e9e lorsque le serveur MVola renvoie une erreur (500, 502, 503, etc.).</p> <pre><code>try:\n    transaction.initiate_payment(...)\nexcept mvola_api.exceptions.MVolaServerError as e:\n    print(f\"Erreur serveur MVola: {e}\")\n    print(f\"Code HTTP: {e.status_code}\")\n    print(f\"URL: {e.url}\")\n    print(f\"R\u00e9ponse: {e.response}\")\n</code></pre>"},{"location":"api-reference/exceptions/#exceptions-de-configuration","title":"Exceptions de configuration","text":"<p><code>MVolaConfigError</code></p> <p>Cette classe repr\u00e9sente les erreurs de configuration de la biblioth\u00e8que.</p> <pre><code>try:\n    # Tentative d'initialisation avec une configuration incompl\u00e8te\n    client = MVolaClient(...)\nexcept mvola_api.exceptions.MVolaConfigError as e:\n    print(f\"Erreur de configuration: {e}\")\n</code></pre>"},{"location":"api-reference/exceptions/#strategies-de-gestion-des-erreurs","title":"Strat\u00e9gies de gestion des erreurs","text":""},{"location":"api-reference/exceptions/#approche-par-type-specifique","title":"Approche par type sp\u00e9cifique","text":"<p>Attrapez d'abord les exceptions les plus sp\u00e9cifiques, puis les plus g\u00e9n\u00e9rales :</p> <pre><code>try:\n    # Code utilisant MVola API\nexcept mvola_api.exceptions.MVolaInvalidCredentialsError as e:\n    # G\u00e9rer les erreurs d'identifiants sp\u00e9cifiquement\n    print(f\"Identifiants invalides: {e}\")\nexcept mvola_api.exceptions.MVolaAuthError as e:\n    # G\u00e9rer les autres erreurs d'authentification\n    print(f\"Erreur d'authentification: {e}\")\nexcept mvola_api.exceptions.MVolaTransactionError as e:\n    # G\u00e9rer les erreurs de transaction\n    print(f\"Erreur de transaction: {e}\")\nexcept mvola_api.exceptions.MVolaError as e:\n    # G\u00e9rer toutes les autres erreurs MVola\n    print(f\"Erreur MVola: {e}\")\nexcept Exception as e:\n    # Attraper toutes les autres exceptions Python\n    print(f\"Erreur inattendue: {e}\")\n</code></pre>"},{"location":"api-reference/exceptions/#gestion-avec-retries","title":"Gestion avec retries","text":"<p>Pour certaines erreurs temporaires (timeout, erreurs serveur), vous pouvez impl\u00e9menter une strat\u00e9gie de retry :</p> <pre><code>from mvola_api.exceptions import MVolaRequestTimeoutError, MVolaServerError\nimport time\n\nmax_retries = 3\nretry_count = 0\n\nwhile retry_count &lt; max_retries:\n    try:\n        result = transaction.initiate_payment(...)\n        # Succ\u00e8s, sortie de la boucle\n        break\n    except (MVolaRequestTimeoutError, MVolaServerError) as e:\n        retry_count += 1\n        if retry_count &gt;= max_retries:\n            print(f\"\u00c9chec apr\u00e8s {max_retries} tentatives: {e}\")\n            raise\n\n        wait_time = 2 ** retry_count  # Backoff exponentiel\n        print(f\"Erreur temporaire: {e}. Tentative {retry_count}/{max_retries} dans {wait_time}s\")\n        time.sleep(wait_time)\n</code></pre>"},{"location":"api-reference/exceptions/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li> <p>Utilisez des exceptions sp\u00e9cifiques : Attrapez les exceptions les plus sp\u00e9cifiques pertinentes pour votre cas d'utilisation.</p> </li> <li> <p>Journalisez les d\u00e9tails : Les exceptions contiennent des informations utiles pour le d\u00e9bogage - journalisez-les.</p> </li> <li> <p>Impl\u00e9mentez des retries : Pour les erreurs temporaires, mettez en place une logique de retry avec backoff.</p> </li> <li> <p>Validez en amont : Pour \u00e9viter certaines exceptions de validation, validez vos donn\u00e9es avant d'appeler l'API.</p> </li> <li> <p>Informez clairement l'utilisateur : Transformez les exceptions techniques en messages compr\u00e9hensibles pour l'utilisateur final.</p> </li> </ol>"},{"location":"api-reference/exceptions/#voir-aussi","title":"Voir aussi","text":"<ul> <li>Guide de gestion des erreurs - Strat\u00e9gies compl\u00e8tes pour la gestion des erreurs</li> <li>R\u00e9f\u00e9rence MVolaClient - Documentation de la classe principale</li> <li>Utilisation basique - Exemples incluant la gestion des erreurs</li> </ul>"},{"location":"api-reference/transaction/","title":"R\u00e9f\u00e9rence du module de transaction","text":"<p>Le module de transaction <code>mvola_api.transaction</code> g\u00e8re toutes les op\u00e9rations de paiement et de v\u00e9rification de statut aupr\u00e8s de l'API MVola. Ce module permet d'initier des paiements, de v\u00e9rifier leur statut et de r\u00e9cup\u00e9rer les d\u00e9tails des transactions.</p>"},{"location":"api-reference/transaction/#classe-mvolatransaction","title":"Classe MVolaTransaction","text":"<p>La classe <code>MVolaTransaction</code> est responsable de toutes les op\u00e9rations li\u00e9es aux transactions financi\u00e8res via l'API MVola.</p>"},{"location":"api-reference/transaction/#initialisation","title":"Initialisation","text":"<pre><code>from mvola_api.transaction import MVolaTransaction\nfrom mvola_api.auth import MVolaAuth\n\n# Initialiser l'authentification\nauth = MVolaAuth(\n    consumer_key=\"votre_consumer_key\",\n    consumer_secret=\"votre_consumer_secret\",\n    sandbox=True  # Utiliser False pour l'environnement de production\n)\n\n# Initialiser le gestionnaire de transactions\ntransaction = MVolaTransaction(\n    auth=auth,\n    partner_name=\"NOM_DU_PARTENAIRE\",\n    partner_msisdn=\"0343500003\",\n    language=\"FR\",  # Optionnel, par d\u00e9faut \"FR\"\n    logger=None     # Optionnel, un logger personnalis\u00e9\n)\n</code></pre>"},{"location":"api-reference/transaction/#operations-principales","title":"Op\u00e9rations principales","text":""},{"location":"api-reference/transaction/#initier-un-paiement","title":"Initier un paiement","text":"<pre><code>try:\n    transaction_info = transaction.initiate_payment(\n        amount=1000,                             # Montant en ariary\n        debit_msisdn=\"0343500003\",               # Num\u00e9ro qui paie\n        credit_msisdn=\"0343500004\",              # Num\u00e9ro qui re\u00e7oit\n        reference=\"REF123456\",                   # R\u00e9f\u00e9rence unique\n        description=\"Paiement pour produit ABC\", # Description\n        callback_url=\"https://example.com/callback\"  # URL de notification (optionnel)\n    )\n\n    # R\u00e9cup\u00e9rer l'ID de la transaction pour suivi ult\u00e9rieur\n    transaction_id = transaction_info.get('server_correlation_id')\n    print(f\"Transaction initi\u00e9e avec succ\u00e8s. ID: {transaction_id}\")\n\nexcept Exception as e:\n    print(f\"Erreur lors de l'initiation du paiement: {e}\")\n</code></pre>"},{"location":"api-reference/transaction/#verifier-le-statut-dune-transaction","title":"V\u00e9rifier le statut d'une transaction","text":"<pre><code>try:\n    status_info = transaction.get_transaction_status(\n        transaction_id=\"transaction-id-12345\",\n        msisdn=\"0343500003\"  # MSISDN associ\u00e9 \u00e0 la transaction\n    )\n\n    status = status_info.get('status')\n    print(f\"Statut de la transaction: {status}\")\n\nexcept Exception as e:\n    print(f\"Erreur lors de la v\u00e9rification du statut: {e}\")\n</code></pre>"},{"location":"api-reference/transaction/#recuperer-les-details-dune-transaction","title":"R\u00e9cup\u00e9rer les d\u00e9tails d'une transaction","text":"<pre><code>try:\n    transaction_details = transaction.get_transaction_details(\n        transaction_id=\"transaction-id-12345\"\n    )\n\n    print(f\"D\u00e9tails de la transaction: {transaction_details}\")\n\nexcept Exception as e:\n    print(f\"Erreur lors de la r\u00e9cup\u00e9ration des d\u00e9tails: {e}\")\n</code></pre>"},{"location":"api-reference/transaction/#structure-des-donnees-de-transaction","title":"Structure des donn\u00e9es de transaction","text":""},{"location":"api-reference/transaction/#resultat-de-linitiation-dun-paiement","title":"R\u00e9sultat de l'initiation d'un paiement","text":"<pre><code>{\n    'status': 'pending',                 # Statut initial de la transaction\n    'server_correlation_id': '12345678-1234-1234-1234-123456789012',  # ID de transaction\n    'notification_method': 'polling',    # M\u00e9thode de notification (polling ou callback)\n    'reference': 'REF123456',            # R\u00e9f\u00e9rence fournie lors de la cr\u00e9ation\n    'request_date': '2024-07-24T10:15:30.000Z'  # Date de la demande\n}\n</code></pre>"},{"location":"api-reference/transaction/#statut-dune-transaction","title":"Statut d'une transaction","text":"<pre><code>{\n    'status': 'completed',               # Statut actuel (pending, completed, failed, rejected, cancelled)\n    'transaction_id': '12345678-1234-1234-1234-123456789012',  # ID de transaction\n    'amount': '1000',                    # Montant de la transaction\n    'currency': 'Ar',                    # Devise (Ariary)\n    'financialTransactionId': '12345678',  # ID financier unique\n    'reason': '',                        # Raison du statut, g\u00e9n\u00e9ralement pr\u00e9sent en cas d'\u00e9chec\n    'date': '2024-07-24T10:15:30.000Z'   # Date de mise \u00e0 jour du statut\n}\n</code></pre>"},{"location":"api-reference/transaction/#details-dune-transaction","title":"D\u00e9tails d'une transaction","text":"<pre><code>{\n    'status': 'completed',                # Statut final de la transaction\n    'amount': '1000',                     # Montant de la transaction\n    'currency': 'Ar',                     # Devise\n    'financialTransactionId': '12345678',  # ID financier\n    'externalId': 'REF123456',            # R\u00e9f\u00e9rence externe (celle fournie \u00e0 l'initiation)\n    'debitParty': [                       # Information sur le payeur\n        {\n            'key': 'msisdn',\n            'value': '0343500003'\n        }\n    ],\n    'creditParty': [                      # Information sur le b\u00e9n\u00e9ficiaire\n        {\n            'key': 'msisdn',\n            'value': '0343500004'\n        }\n    ],\n    'fees': {                             # Frais associ\u00e9s \u00e0 la transaction\n        'amount': '20',\n        'currency': 'Ar'\n    },\n    'creationDate': '2024-07-24T10:15:30.000Z'  # Date de cr\u00e9ation de la transaction\n}\n</code></pre>"},{"location":"api-reference/transaction/#validation-des-donnees","title":"Validation des donn\u00e9es","text":"<p>Le module de transaction effectue une validation approfondie des donn\u00e9es avant d'envoyer des requ\u00eates \u00e0 l'API MVola:</p> <pre><code># Formats accept\u00e9s pour les num\u00e9ros de t\u00e9l\u00e9phone\n# - 034XXXXXXX, 038XXXXXXX, etc. (format national)\n# - 0XXXXXXXXX (format g\u00e9n\u00e9rique)\n\n# Validation du montant\n# - Doit \u00eatre un nombre positif\n# - Doit respecter les limites de transaction MVola\n\n# Validation de la r\u00e9f\u00e9rence\n# - Doit \u00eatre unique\n# - Ne doit pas contenir certains caract\u00e8res sp\u00e9ciaux\n</code></pre>"},{"location":"api-reference/transaction/#exceptions-specifiques-aux-transactions","title":"Exceptions sp\u00e9cifiques aux transactions","text":"<p>Le module de transaction peut lever les exceptions suivantes :</p> <ul> <li><code>MVolaTransactionError</code>: Exception de base pour les erreurs de transaction</li> <li><code>MVolaTransactionValidationError</code>: Lev\u00e9e lorsque les donn\u00e9es de transaction sont invalides</li> <li><code>MVolaTransactionStatusError</code>: Lev\u00e9e lorsqu'une v\u00e9rification de statut \u00e9choue</li> <li><code>MVolaTransactionCreationError</code>: Lev\u00e9e lorsque la cr\u00e9ation d'une transaction \u00e9choue</li> </ul> <pre><code>from mvola_api.exceptions import (\n    MVolaTransactionError,\n    MVolaTransactionValidationError,\n    MVolaTransactionStatusError,\n    MVolaTransactionCreationError\n)\n\ntry:\n    transaction_info = transaction.initiate_payment(...)\nexcept MVolaTransactionValidationError as e:\n    print(f\"Erreur de validation: {e}\")\nexcept MVolaTransactionCreationError as e:\n    print(f\"Erreur de cr\u00e9ation: {e}\")\nexcept MVolaTransactionError as e:\n    print(f\"Erreur de transaction: {e}\")\n</code></pre>"},{"location":"api-reference/transaction/#fonctionnement-interne","title":"Fonctionnement interne","text":""},{"location":"api-reference/transaction/#endpoints-des-transactions","title":"Endpoints des transactions","text":"<p>Le module utilise diff\u00e9rents endpoints en fonction de l'environnement:</p> <p>Sandbox: - Initiation de paiement: <code>https://api-uat.orange.mg/mvola/mm/transactions/type/merchantpay</code> - V\u00e9rification de statut: <code>https://api-uat.orange.mg/mvola/mm/transactions/{transaction_id}</code> - D\u00e9tails de transaction: <code>https://api-uat.orange.mg/mvola/mm/transactions/{transaction_id}</code></p> <p>Production: - Initiation de paiement: <code>https://api.orange.mg/mvola/mm/transactions/type/merchantpay</code> - V\u00e9rification de statut: <code>https://api.orange.mg/mvola/mm/transactions/{transaction_id}</code> - D\u00e9tails de transaction: <code>https://api.orange.mg/mvola/mm/transactions/{transaction_id}</code></p>"},{"location":"api-reference/transaction/#en-tetes-de-requete","title":"En-t\u00eates de requ\u00eate","text":"<pre><code>headers = {\n    \"Authorization\": \"Bearer {token}\",\n    \"Version\": \"1.0\",\n    \"X-Correlation-ID\": \"{uuid4}\",  # Identifiant unique g\u00e9n\u00e9r\u00e9 pour chaque requ\u00eate\n    \"Content-Type\": \"application/json\",\n    \"Cache-Control\": \"no-cache\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept\": \"*/*\"\n}\n</code></pre>"},{"location":"api-reference/transaction/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li> <p>G\u00e9n\u00e9rez des r\u00e9f\u00e9rences uniques pour chaque transaction. La biblioth\u00e8que n'impose pas ce comportement, mais c'est fortement recommand\u00e9.</p> </li> <li> <p>Stockez les IDs de transaction retourn\u00e9s par l'API pour un suivi ult\u00e9rieur. Ces identifiants sont essentiels pour v\u00e9rifier le statut.</p> </li> <li> <p>Impl\u00e9mentez un syst\u00e8me de retry pour v\u00e9rifier le statut des transactions jusqu'\u00e0 ce qu'elles soient termin\u00e9es.</p> </li> <li> <p>Utilisez les webhooks (URL de callback) lorsque c'est possible, plut\u00f4t que de faire des sondages r\u00e9p\u00e9t\u00e9s.</p> </li> <li> <p>V\u00e9rifiez toujours le statut final d'une transaction avant de consid\u00e9rer un paiement comme r\u00e9ussi.</p> </li> </ol>"},{"location":"api-reference/transaction/#voir-aussi","title":"Voir aussi","text":"<ul> <li>Guide des transactions - Guide complet sur les transactions MVola</li> <li>R\u00e9f\u00e9rence MVolaClient - Documentation de la classe principale qui utilise MVolaTransaction</li> <li>Gestion des Webhooks - Comment g\u00e9rer les notifications de transaction </li> </ul>"},{"location":"api-reference/utils/","title":"R\u00e9f\u00e9rence des utilitaires","text":"<p>Le module <code>mvola_api.utils</code> fournit un ensemble de fonctions utilitaires et d'outils pour faciliter l'utilisation de la biblioth\u00e8que MVola API. Ces utilitaires vous aident \u00e0 formater les donn\u00e9es, valider les param\u00e8tres, g\u00e9rer les num\u00e9ros de t\u00e9l\u00e9phone et plus encore.</p>"},{"location":"api-reference/utils/#fonctions-utilitaires","title":"Fonctions utilitaires","text":"<p>Ce module contient plusieurs fonctions utilitaires qui vous aident \u00e0 travailler avec l'API MVola.</p>"},{"location":"api-reference/utils/#validation-des-numeros-de-telephone","title":"Validation des num\u00e9ros de t\u00e9l\u00e9phone","text":"<pre><code>from mvola_api.utils import validate_msisdn, format_msisdn\n\n# Validation d'un num\u00e9ro de t\u00e9l\u00e9phone\ntry:\n    # V\u00e9rifie si le format du num\u00e9ro est valide\n    validate_msisdn(\"0343500003\")  # Valide\n    validate_msisdn(\"0343500004\")  # Valide\n    validate_msisdn(\"0340000\")     # L\u00e8ve MVolaValidationError (trop court)\n    validate_msisdn(\"abcdefghij\")  # L\u00e8ve MVolaValidationError (format invalide)\nexcept Exception as e:\n    print(f\"Num\u00e9ro invalide: {e}\")\n\n# Formatage du num\u00e9ro de t\u00e9l\u00e9phone au format international (si n\u00e9cessaire pour l'API)\ninternational_number = format_msisdn(\"0343500003\")\nprint(international_number)  # Affiche: 261343500003 (pour l'API)\n\n# La fonction d\u00e9tecte automatiquement le format\nsame_number = format_msisdn(\"0343500003\")\nprint(same_number)  # Formate correctement le num\u00e9ro\n</code></pre>"},{"location":"api-reference/utils/#generation-didentifiants","title":"G\u00e9n\u00e9ration d'identifiants","text":"<pre><code>from mvola_api.utils import generate_uuid, generate_reference\n\n# G\u00e9n\u00e9ration d'un UUID unique\ncorrelation_id = generate_uuid()\nprint(correlation_id)  # Ex: 550e8400-e29b-41d4-a716-446655440000\n\n# G\u00e9n\u00e9ration d'une r\u00e9f\u00e9rence unique pour les transactions\nreference = generate_reference(prefix=\"PAY\")\nprint(reference)  # Ex: PAY-12AB34CD\n</code></pre>"},{"location":"api-reference/utils/#formatage-de-donnees","title":"Formatage de donn\u00e9es","text":"<pre><code>from mvola_api.utils import format_amount, format_date\n\n# Formatage du montant\nformatted_amount = format_amount(1234.56)\nprint(formatted_amount)  # \"1234.56\" (cha\u00eene de caract\u00e8res)\n\n# Formatage de la date au format ISO 8601\niso_date = format_date()  # Utilise la date et heure actuelles\nprint(iso_date)  # Ex: 2024-07-24T10:15:30.000Z\n\n# Formatage avec une date sp\u00e9cifique\nfrom datetime import datetime\nspecific_date = datetime(2024, 1, 1, 12, 0, 0)\nformatted_date = format_date(specific_date)\nprint(formatted_date)  # \"2024-01-01T12:00:00.000Z\"\n</code></pre>"},{"location":"api-reference/utils/#validation-des-parametres","title":"Validation des param\u00e8tres","text":"<pre><code>from mvola_api.utils import validate_required_params\n\n# Validation des param\u00e8tres requis\ndata = {\n    \"param1\": \"value1\",\n    \"param2\": None,\n    \"param3\": \"value3\"\n}\n\nrequired_params = [\"param1\", \"param2\", \"param4\"]\n\ntry:\n    # V\u00e9rifie si tous les param\u00e8tres requis sont pr\u00e9sents et non None\n    validate_required_params(data, required_params)\nexcept Exception as e:\n    print(f\"Param\u00e8tres manquants: {e}\")\n    # Affiche: \"Param\u00e8tres manquants: Les param\u00e8tres suivants sont requis: param2, param4\"\n</code></pre>"},{"location":"api-reference/utils/#configuration-du-logging","title":"Configuration du logging","text":"<pre><code>from mvola_api.utils import setup_logger\nimport logging\n\n# Configuration du logger par d\u00e9faut\nlogger = setup_logger()\nlogger.info(\"Message d'information\")\nlogger.error(\"Message d'erreur\")\n\n# Configuration personnalis\u00e9e\ncustom_logger = setup_logger(\n    name=\"custom_logger\",\n    level=logging.DEBUG,\n    log_format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n    log_file=\"mvola.log\"  # Optionnel\n)\n\ncustom_logger.debug(\"Message de d\u00e9bogage\")\n</code></pre>"},{"location":"api-reference/utils/#gestion-des-requetes-http","title":"Gestion des requ\u00eates HTTP","text":"<pre><code>from mvola_api.utils import make_api_request\nimport requests\n\n# Effectuer une requ\u00eate API avec gestion d'erreurs\ntry:\n    response = make_api_request(\n        method=\"GET\",\n        url=\"https://api.example.com/resource\",\n        headers={\"Authorization\": \"Bearer token\"},\n        params={\"param1\": \"value1\"},\n        timeout=10,\n        verify_ssl=True\n    )\n\n    print(f\"R\u00e9ponse: {response.json()}\")\n\nexcept Exception as e:\n    print(f\"Erreur lors de la requ\u00eate: {e}\")\n</code></pre>"},{"location":"api-reference/utils/#outils-de-debogage","title":"Outils de d\u00e9bogage","text":"<pre><code>from mvola_api.utils import debug_request, debug_response\n\n# Afficher les d\u00e9tails d'une requ\u00eate HTTP pour le d\u00e9bogage\ndebug_request(\n    method=\"POST\",\n    url=\"https://api.example.com/resource\",\n    headers={\"Authorization\": \"Bearer token\", \"Content-Type\": \"application/json\"},\n    data={\"key\": \"value\"}\n)\n\n# Afficher les d\u00e9tails d'une r\u00e9ponse HTTP pour le d\u00e9bogage\nresponse = requests.get(\"https://api.example.com/resource\")\ndebug_response(response)\n</code></pre>"},{"location":"api-reference/utils/#utilitaires-de-securite","title":"Utilitaires de s\u00e9curit\u00e9","text":"<pre><code>from mvola_api.utils import encode_credentials, mask_sensitive_data\n\n# Encodage des identifiants en Base64 pour l'authentification\nencoded = encode_credentials(\"consumer_key\", \"consumer_secret\")\nprint(encoded)  # Cha\u00eene encod\u00e9e en Base64\n\n# Masquage des donn\u00e9es sensibles pour la journalisation\ndata = {\n    \"consumer_key\": \"my_consumer_key\",\n    \"consumer_secret\": \"my_consumer_secret\",\n    \"msisdn\": \"0343500003\",\n    \"amount\": 1000\n}\n\nmasked_data = mask_sensitive_data(data)\nprint(masked_data)\n# Affiche: {'consumer_key': '***', 'consumer_secret': '***', 'msisdn': '0343******', 'amount': 1000}\n</code></pre>"},{"location":"api-reference/utils/#utilitaires-de-conversion","title":"Utilitaires de conversion","text":"<pre><code>from mvola_api.utils import to_boolean, to_int, to_float, to_str\n\n# Conversion en bool\u00e9en\nprint(to_boolean(\"true\"))   # True\nprint(to_boolean(\"yes\"))    # True\nprint(to_boolean(\"1\"))      # True\nprint(to_boolean(\"false\"))  # False\nprint(to_boolean(\"no\"))     # False\nprint(to_boolean(\"0\"))      # False\n\n# Conversion en entier avec valeur par d\u00e9faut\nprint(to_int(\"123\"))        # 123\nprint(to_int(\"abc\", 0))     # 0 (valeur par d\u00e9faut)\n\n# Conversion en flottant avec valeur par d\u00e9faut\nprint(to_float(\"123.45\"))   # 123.45\nprint(to_float(\"abc\", 0.0)) # 0.0 (valeur par d\u00e9faut)\n\n# Conversion en cha\u00eene avec formatage\nprint(to_str(123))          # \"123\"\nprint(to_str(None, \"N/A\"))  # \"N/A\" (valeur par d\u00e9faut)\n</code></pre>"},{"location":"api-reference/utils/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li> <p>Validez les num\u00e9ros de t\u00e9l\u00e9phone : Utilisez <code>validate_msisdn</code> et <code>format_msisdn</code> pour vous assurer que les num\u00e9ros sont au format correct avant d'effectuer des transactions.</p> </li> <li> <p>G\u00e9n\u00e9rez des r\u00e9f\u00e9rences uniques : Utilisez <code>generate_reference</code> pour cr\u00e9er des r\u00e9f\u00e9rences de transaction uniques et tra\u00e7ables.</p> </li> <li> <p>Utilisez le logging : Configurez un logger avec <code>setup_logger</code> pour faciliter le d\u00e9bogage et le suivi des op\u00e9rations.</p> </li> <li> <p>Masquez les donn\u00e9es sensibles : Utilisez <code>mask_sensitive_data</code> avant de journaliser des informations qui pourraient contenir des donn\u00e9es confidentielles.</p> </li> <li> <p>Utilisez la validation de param\u00e8tres : Assurez-vous que tous les param\u00e8tres requis sont pr\u00e9sents avec <code>validate_required_params</code> avant d'effectuer des op\u00e9rations.</p> </li> </ol>"},{"location":"api-reference/utils/#voir-aussi","title":"Voir aussi","text":"<ul> <li>Guide des transactions - Voir comment ces utilitaires sont utilis\u00e9s dans les transactions</li> <li>R\u00e9f\u00e9rence du client - Documentation de la classe principale qui utilise ces utilitaires</li> <li>Gestion des erreurs - Comment les utilitaires contribuent \u00e0 la gestion des erreurs </li> </ul>"},{"location":"examples/basic-usage/","title":"Utilisation basique","text":"<p>Ce guide fournit des exemples simples d'utilisation de la biblioth\u00e8que MVola API.</p>"},{"location":"examples/basic-usage/#installation","title":"Installation","text":"<p>Commencez par installer la biblioth\u00e8que :</p> <pre><code>pip install mvola-api\n</code></pre>"},{"location":"examples/basic-usage/#initialisation","title":"Initialisation","text":"<p>Pour commencer \u00e0 utiliser la biblioth\u00e8que MVola API, vous devez d'abord initialiser un client :</p> <pre><code>from mvola_api import MVolaClient\n\n# Initialisation pour l'environnement sandbox (d\u00e9veloppement)\nclient = MVolaClient(\n    consumer_key=\"votre_consumer_key\",\n    consumer_secret=\"votre_consumer_secret\",\n    partner_name=\"Nom de votre application\",\n    partner_msisdn=\"0343500003\",  # Votre num\u00e9ro MVola\n    sandbox=True  # Pour l'environnement de test\n)\n</code></pre>"},{"location":"examples/basic-usage/#generation-dun-token","title":"G\u00e9n\u00e9ration d'un token","text":"<p>La biblioth\u00e8que g\u00e8re automatiquement les tokens d'authentification, mais vous pouvez \u00e9galement g\u00e9n\u00e9rer ou rafra\u00eechir un token manuellement :</p> <pre><code># G\u00e9n\u00e9rer un token d'authentification\ntoken = client.generate_token()\nprint(f\"Token: {token['access_token']}\")\nprint(f\"Expire dans: {token['expires_in']} secondes\")\n\n# V\u00e9rifier si un token est expir\u00e9\nis_expired = client.is_token_expired()\nprint(f\"Token expir\u00e9: {is_expired}\")\n\n# Rafra\u00eechir manuellement le token\nclient.refresh_token()\n</code></pre>"},{"location":"examples/basic-usage/#initier-un-paiement","title":"Initier un paiement","text":"<p>Pour initier un paiement MVola :</p> <pre><code>try:\n    transaction_info = client.initiate_payment(\n        amount=1000,                             # Montant en ariary\n        debit_msisdn=\"0343500003\",               # Num\u00e9ro qui paie\n        credit_msisdn=\"0343500004\",              # Num\u00e9ro qui re\u00e7oit\n        reference=\"REF123456\",                   # R\u00e9f\u00e9rence unique\n        description=\"Paiement pour produit ABC\", # Description\n        callback_url=\"https://example.com/callback\"  # URL de notification (optionnel)\n    )\n\n    # R\u00e9cup\u00e9rer l'ID de la transaction pour suivi ult\u00e9rieur\n    transaction_id = transaction_info.get('server_correlation_id')\n    print(f\"Transaction initi\u00e9e avec succ\u00e8s. ID: {transaction_id}\")\n\nexcept Exception as e:\n    print(f\"Erreur lors de l'initiation du paiement: {e}\")\n</code></pre>"},{"location":"examples/basic-usage/#verifier-le-statut-dune-transaction","title":"V\u00e9rifier le statut d'une transaction","text":"<p>Pour v\u00e9rifier le statut d'une transaction en cours :</p> <pre><code>try:\n    status_info = client.get_transaction_status(\n        transaction_id=\"transaction-id-12345\",  # ID obtenu lors de l'initiation\n        msisdn=\"0343500003\"                     # Num\u00e9ro associ\u00e9 \u00e0 la transaction\n    )\n\n    status = status_info.get('status')\n    print(f\"Statut de la transaction: {status}\")\n\n    # \u00c9tats possibles : pending, completed, failed, cancelled\n    if status == 'completed':\n        print(\"Transaction r\u00e9ussie!\")\n    elif status == 'pending':\n        print(\"Transaction en attente de confirmation...\")\n    else:\n        print(f\"Transaction termin\u00e9e avec statut: {status}\")\n        if 'reason' in status_info:\n            print(f\"Raison: {status_info['reason']}\")\n\nexcept Exception as e:\n    print(f\"Erreur lors de la v\u00e9rification du statut: {e}\")\n</code></pre>"},{"location":"examples/basic-usage/#recuperer-les-details-dune-transaction","title":"R\u00e9cup\u00e9rer les d\u00e9tails d'une transaction","text":"<p>Pour obtenir tous les d\u00e9tails d'une transaction termin\u00e9e :</p> <pre><code>try:\n    transaction_details = client.get_transaction_details(\n        transaction_id=\"transaction-id-12345\"  # ID obtenu lors de l'initiation\n    )\n\n    print(f\"D\u00e9tails de la transaction: {transaction_details}\")\n    print(f\"Montant: {transaction_details.get('amount')} {transaction_details.get('currency')}\")\n    print(f\"ID financier: {transaction_details.get('financialTransactionId')}\")\n    print(f\"Date de cr\u00e9ation: {transaction_details.get('creationDate')}\")\n\n    # Acc\u00e9der aux informations du payeur\n    debit_party = transaction_details.get('debitParty', [])\n    for party in debit_party:\n        if party.get('key') == 'msisdn':\n            print(f\"Payeur: {party.get('value')}\")\n\n    # Acc\u00e9der aux informations du b\u00e9n\u00e9ficiaire\n    credit_party = transaction_details.get('creditParty', [])\n    for party in credit_party:\n        if party.get('key') == 'msisdn':\n            print(f\"B\u00e9n\u00e9ficiaire: {party.get('value')}\")\n\nexcept Exception as e:\n    print(f\"Erreur lors de la r\u00e9cup\u00e9ration des d\u00e9tails: {e}\")\n</code></pre>"},{"location":"examples/basic-usage/#exemple-complet","title":"Exemple complet","text":"<p>Voici un exemple complet qui combine plusieurs op\u00e9rations :</p> <pre><code>from mvola_api import MVolaClient\nfrom mvola_api.exceptions import MVolaError, MVolaTransactionError\nfrom mvola_api.utils import generate_reference\n\n# Initialisation du client\ntry:\n    client = MVolaClient(\n        consumer_key=\"votre_consumer_key\",\n        consumer_secret=\"votre_consumer_secret\",\n        partner_name=\"Nom de votre application\",\n        partner_msisdn=\"0343500003\",\n        sandbox=True\n    )\n\n    # G\u00e9n\u00e9rer une r\u00e9f\u00e9rence unique pour la transaction\n    reference = generate_reference(prefix=\"PAY\")\n\n    # Initier un paiement\n    transaction_info = client.initiate_payment(\n        amount=1000,\n        debit_msisdn=\"0343500003\",\n        credit_msisdn=\"0343500004\",\n        reference=reference,\n        description=\"Paiement test\"\n    )\n\n    transaction_id = transaction_info.get('server_correlation_id')\n    print(f\"Transaction initi\u00e9e avec succ\u00e8s!\")\n    print(f\"ID de transaction: {transaction_id}\")\n    print(f\"R\u00e9f\u00e9rence: {reference}\")\n\n    # V\u00e9rifier le statut initial\n    status_info = client.get_transaction_status(\n        transaction_id=transaction_id,\n        msisdn=\"0343500003\"\n    )\n\n    print(f\"Statut initial: {status_info.get('status')}\")\n    print(\"Veuillez confirmer la transaction sur votre t\u00e9l\u00e9phone...\")\n\n    # Dans une application r\u00e9elle, vous pourriez impl\u00e9menter une boucle de polling\n    # pour v\u00e9rifier r\u00e9guli\u00e8rement le statut, ou utiliser des webhooks\n\nexcept MVolaTransactionError as e:\n    print(f\"Erreur de transaction: {e}\")\n    if hasattr(e, 'field'):\n        print(f\"Champ en erreur: {e.field}\")\n\nexcept MVolaError as e:\n    print(f\"Erreur MVola: {e}\")\n\nexcept Exception as e:\n    print(f\"Erreur inattendue: {e}\")\n</code></pre>"},{"location":"examples/basic-usage/#gestion-avec-environnement-virtuel","title":"Gestion avec environnement virtuel","text":"<p>Pour une utilisation dans un projet, il est recommand\u00e9 de configurer un environnement virtuel :</p> <pre><code># Cr\u00e9er un environnement virtuel\npython -m venv venv\n\n# Activer l'environnement virtuel\n# Sur Windows\nvenv\\Scripts\\activate\n# Sur macOS/Linux\nsource venv/bin/activate\n\n# Installer la biblioth\u00e8que\npip install mvola-api\n</code></pre>"},{"location":"examples/basic-usage/#voir-aussi","title":"Voir aussi","text":"<ul> <li>Guide d'authentification - Guide complet sur l'authentification</li> <li>Guide des transactions - Guide complet sur les transactions</li> <li>Gestion des erreurs - Comment g\u00e9rer les erreurs efficacement</li> <li>Int\u00e9gration web - Exemples d'int\u00e9gration avec des frameworks web </li> </ul>"},{"location":"examples/web-integration/","title":"Int\u00e9gration Web","text":"<p>Ce guide explique comment int\u00e9grer la biblioth\u00e8que MVola API dans une application web en utilisant Flask comme exemple.</p>"},{"location":"examples/web-integration/#configuration-du-projet","title":"Configuration du projet","text":"<p>Avant de commencer, assurez-vous d'avoir install\u00e9 la biblioth\u00e8que MVola API ainsi que Flask :</p> <pre><code>pip install mvola-api flask python-dotenv\n</code></pre>"},{"location":"examples/web-integration/#structure-du-projet","title":"Structure du projet","text":"<p>Voici une structure de projet recommand\u00e9e pour une application web Flask avec MVola :</p> <pre><code>mvola-web-app/\n\u2502\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 config.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 payment_controller.py\n\u2502   \u2502   \u2514\u2500\u2500 webhook_controller.py\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 mvola_service.py\n\u2502   \u251c\u2500\u2500 static/\n\u2502   \u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 js/\n\u2502   \u2514\u2500\u2500 templates/\n\u2502       \u251c\u2500\u2500 base.html\n\u2502       \u251c\u2500\u2500 index.html\n\u2502       \u2514\u2500\u2500 payment.html\n\u2502\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 run.py\n</code></pre>"},{"location":"examples/web-integration/#configuration-de-lapplication","title":"Configuration de l'application","text":"<p>Commen\u00e7ons par configurer l'application Flask.</p> <p>app/config.py:</p> <pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-key-change-in-production')\n\n    # Configuration MVola\n    MVOLA_CONSUMER_KEY = os.environ.get('MVOLA_CONSUMER_KEY')\n    MVOLA_CONSUMER_SECRET = os.environ.get('MVOLA_CONSUMER_SECRET')\n    MVOLA_PARTNER_NAME = os.environ.get('MVOLA_PARTNER_NAME')\n    MVOLA_PARTNER_MSISDN = os.environ.get('MVOLA_PARTNER_MSISDN')\n    MVOLA_SANDBOX = os.environ.get('MVOLA_SANDBOX', 'True').lower() in ('true', '1', 't')\n\n    # URL pour les webhooks (url publique)\n    WEBHOOK_BASE_URL = os.environ.get('WEBHOOK_BASE_URL', 'https://example.com')\n</code></pre> <p>app/init.py:</p> <pre><code>from flask import Flask\nfrom app.config import Config\n\ndef create_app(config_class=Config):\n    app = Flask(__name__)\n    app.config.from_object(config_class)\n\n    # Enregistrement des blueprints\n    from app.controllers.payment_controller import payment_bp\n    from app.controllers.webhook_controller import webhook_bp\n\n    app.register_blueprint(payment_bp)\n    app.register_blueprint(webhook_bp)\n\n    return app\n</code></pre>"},{"location":"examples/web-integration/#service-mvola","title":"Service MVola","text":"<p>Cr\u00e9ons un service qui encapsule notre logique d'interaction avec MVola.</p> <p>app/services/mvola_service.py:</p> <pre><code>import uuid\nimport logging\nfrom mvola_api import MVolaClient\nfrom mvola_api.exceptions import MVolaError, MVolaAuthError, MVolaTransactionError\n\nclass MVolaService:\n    def __init__(self, config):\n        self.logger = logging.getLogger('mvola_service')\n\n        self.client = MVolaClient(\n            consumer_key=config['MVOLA_CONSUMER_KEY'],\n            consumer_secret=config['MVOLA_CONSUMER_SECRET'],\n            partner_name=config['MVOLA_PARTNER_NAME'],\n            partner_msisdn=config['MVOLA_PARTNER_MSISDN'],\n            sandbox=config['MVOLA_SANDBOX']\n        )\n\n        self.webhook_base_url = config['WEBHOOK_BASE_URL']\n\n    def generate_reference(self):\n        \"\"\"G\u00e9n\u00e8re une r\u00e9f\u00e9rence unique pour une transaction.\"\"\"\n        return f\"WEB-{uuid.uuid4().hex[:12].upper()}\"\n\n    def initiate_payment(self, amount, debit_msisdn, description, order_id=None):\n        \"\"\"\n        Initie un paiement MVola.\n\n        Args:\n            amount (float): Le montant \u00e0 payer\n            debit_msisdn (str): Le MSISDN du client qui paie\n            description (str): Description du paiement\n            order_id (str, optional): Identifiant de commande pour le callback\n\n        Returns:\n            dict: Les informations de la transaction\n        \"\"\"\n        reference = self.generate_reference()\n\n        # Construire l'URL de callback avec l'ID de commande si fourni\n        callback_url = f\"{self.webhook_base_url}/webhooks/mvola/callback\"\n        if order_id:\n            callback_url = f\"{callback_url}?order_id={order_id}\"\n\n        try:\n            self.logger.info(f\"Initiation de paiement: {amount} Ar depuis {debit_msisdn}\")\n\n            transaction_info = self.client.initiate_payment(\n                amount=amount,\n                debit_msisdn=debit_msisdn,\n                credit_msisdn=self.client.partner_msisdn,\n                reference=reference,\n                description=description,\n                callback_url=callback_url\n            )\n\n            transaction_id = transaction_info.get('server_correlation_id')\n            self.logger.info(f\"Paiement initi\u00e9 avec succ\u00e8s. ID: {transaction_id}\")\n\n            # Stocker les infos de transaction avec l'ID de commande pour le suivi\n            return {\n                'transaction_id': transaction_id,\n                'reference': reference,\n                'amount': amount,\n                'debit_msisdn': debit_msisdn,\n                'status': 'pending',\n                'order_id': order_id\n            }\n\n        except MVolaError as e:\n            self.logger.error(f\"Erreur lors de l'initiation du paiement: {e}\")\n            raise\n\n    def check_transaction_status(self, transaction_id, msisdn):\n        \"\"\"V\u00e9rifie le statut d'une transaction.\"\"\"\n        try:\n            status_info = self.client.get_transaction_status(\n                transaction_id=transaction_id,\n                msisdn=msisdn\n            )\n\n            return status_info\n\n        except MVolaError as e:\n            self.logger.error(f\"Erreur lors de la v\u00e9rification du statut: {e}\")\n            raise\n</code></pre>"},{"location":"examples/web-integration/#controleur-de-paiement","title":"Contr\u00f4leur de paiement","text":"<p>Cr\u00e9ons le contr\u00f4leur qui g\u00e8re les routes pour l'interface utilisateur et le traitement des paiements.</p> <p>app/controllers/payment_controller.py:</p> <pre><code>from flask import Blueprint, render_template, request, jsonify, current_app, redirect, url_for, flash, session\nfrom app.services.mvola_service import MVolaService\nfrom mvola_api.exceptions import MVolaError, MVolaValidationError\n\npayment_bp = Blueprint('payment', __name__)\n\n@payment_bp.route('/')\ndef index():\n    \"\"\"Page d'accueil avec formulaire de paiement.\"\"\"\n    return render_template('index.html')\n\n@payment_bp.route('/payment', methods=['GET', 'POST'])\ndef payment():\n    \"\"\"Traitement du formulaire de paiement.\"\"\"\n    if request.method == 'POST':\n        # R\u00e9cup\u00e9rer les donn\u00e9es du formulaire\n        amount = float(request.form.get('amount', 0))\n        phone_number = request.form.get('phone_number', '')\n        description = request.form.get('description', 'Paiement web')\n\n        # Valider les donn\u00e9es\n        errors = {}\n        if amount &lt;= 0:\n            errors['amount'] = \"Le montant doit \u00eatre sup\u00e9rieur \u00e0 0\"\n\n        if not phone_number.startswith('0') or len(phone_number) != 10:\n            errors['phone_number'] = \"Le num\u00e9ro doit \u00eatre au format 034XXXXXXX\"\n\n        if errors:\n            for key, message in errors.items():\n                flash(message, 'error')\n            return render_template('payment.html', form_data=request.form)\n\n        # G\u00e9n\u00e9rer un ID de commande et le stocker en session\n        order_id = f\"ORD-{session.get('user_id', 'ANON')}-{int(time.time())}\"\n        session['current_order_id'] = order_id\n\n        # Initialiser le service MVola\n        mvola_service = MVolaService(current_app.config)\n\n        try:\n            # Initier le paiement\n            transaction = mvola_service.initiate_payment(\n                amount=amount,\n                debit_msisdn=phone_number,\n                description=description,\n                order_id=order_id\n            )\n\n            # Stocker l'ID de transaction en session pour le suivi\n            session['transaction_id'] = transaction['transaction_id']\n\n            # Rediriger vers la page de statut\n            return redirect(url_for('payment.status'))\n\n        except MVolaValidationError as e:\n            flash(f\"Erreur de validation: {e}\", 'error')\n            return render_template('payment.html', form_data=request.form)\n\n        except MVolaError as e:\n            flash(f\"Erreur lors du paiement: {e}\", 'error')\n            return render_template('payment.html', form_data=request.form)\n\n    # Si m\u00e9thode GET, afficher le formulaire\n    return render_template('payment.html')\n\n@payment_bp.route('/payment/status')\ndef status():\n    \"\"\"Affiche le statut du paiement et permet de v\u00e9rifier son \u00e9tat.\"\"\"\n    transaction_id = session.get('transaction_id')\n\n    if not transaction_id:\n        flash(\"Aucune transaction en cours\", 'error')\n        return redirect(url_for('payment.index'))\n\n    # R\u00e9cup\u00e9rer le statut si demand\u00e9\n    status_info = None\n    if request.args.get('check') == '1':\n        mvola_service = MVolaService(current_app.config)\n        try:\n            status_info = mvola_service.check_transaction_status(\n                transaction_id=transaction_id,\n                msisdn=current_app.config['MVOLA_PARTNER_MSISDN']\n            )\n        except Exception as e:\n            flash(f\"Erreur lors de la v\u00e9rification du statut: {e}\", 'error')\n\n    return render_template('status.html', transaction_id=transaction_id, status_info=status_info)\n</code></pre>"},{"location":"examples/web-integration/#controleur-de-webhook","title":"Contr\u00f4leur de webhook","text":"<p>Cr\u00e9ons le contr\u00f4leur pour g\u00e9rer les webhooks de MVola.</p> <p>app/controllers/webhook_controller.py:</p> <pre><code>import logging\nfrom flask import Blueprint, request, jsonify, current_app\n\nwebhook_bp = Blueprint('webhook', __name__, url_prefix='/webhooks')\nlogger = logging.getLogger('webhook_controller')\n\n@webhook_bp.route('/mvola/callback', methods=['POST'])\ndef mvola_callback():\n    \"\"\"\n    G\u00e8re les callbacks de MVola pour les notifications de transactions.\n\n    MVola envoie des notifications quand le statut d'une transaction change.\n    \"\"\"\n    # R\u00e9cup\u00e9rer les donn\u00e9es du webhook\n    data = request.get_json()\n\n    if not data:\n        logger.warning(\"Donn\u00e9es de webhook vides ou mal format\u00e9es\")\n        return jsonify({'status': 'error', 'message': 'Invalid data format'}), 400\n\n    # R\u00e9cup\u00e9rer l'ID de commande des query params si pr\u00e9sent\n    order_id = request.args.get('order_id')\n\n    # R\u00e9cup\u00e9rer l'ID de transaction et le statut\n    transaction_id = data.get('transactionId')\n    status = data.get('status')\n\n    logger.info(f\"Webhook re\u00e7u: Transaction {transaction_id}, Statut {status}, Commande {order_id}\")\n\n    # Ici, vous mettriez \u00e0 jour votre base de donn\u00e9es avec le statut\n    # Par exemple: update_transaction_status(transaction_id, status, order_id)\n\n    # Si la transaction est termin\u00e9e et valid\u00e9e, vous pourriez d\u00e9clencher d'autres actions\n    if status and status.lower() == 'completed':\n        logger.info(f\"Transaction {transaction_id} termin\u00e9e avec succ\u00e8s\")\n        # complete_order(order_id)  # Marquer la commande comme pay\u00e9e\n\n    # Toujours retourner un 200 OK pour informer MVola que le webhook a \u00e9t\u00e9 re\u00e7u\n    return jsonify({'status': 'success', 'message': 'Webhook received'}), 200\n</code></pre>"},{"location":"examples/web-integration/#templates","title":"Templates","text":"<p>Cr\u00e9ons les templates de base pour notre application.</p> <p>app/templates/base.html:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{% block title %}MVola Payment Demo{% endblock %}&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/style.css') }}\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;h1&gt;MVola Payment Demo&lt;/h1&gt;\n        &lt;nav&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"{{ url_for('payment.index') }}\"&gt;Accueil&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"{{ url_for('payment.payment') }}\"&gt;Paiement&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    &lt;/header&gt;\n\n    &lt;main&gt;\n        {% with messages = get_flashed_messages(with_categories=true) %}\n            {% if messages %}\n                &lt;div class=\"flashes\"&gt;\n                    {% for category, message in messages %}\n                        &lt;div class=\"flash {{ category }}\"&gt;{{ message }}&lt;/div&gt;\n                    {% endfor %}\n                &lt;/div&gt;\n            {% endif %}\n        {% endwith %}\n\n        {% block content %}{% endblock %}\n    &lt;/main&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;&amp;copy; {% now \"Y\" %} MVola API Demo&lt;/p&gt;\n    &lt;/footer&gt;\n\n    {% block scripts %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>app/templates/index.html:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block title %}Accueil - MVola Payment Demo{% endblock %}\n\n{% block content %}\n&lt;section class=\"hero\"&gt;\n    &lt;h2&gt;Paiements faciles avec MVola API&lt;/h2&gt;\n    &lt;p&gt;D\u00e9couvrez comment int\u00e9grer MVola dans votre application web&lt;/p&gt;\n    &lt;a href=\"{{ url_for('payment.payment') }}\" class=\"btn btn-primary\"&gt;Essayer maintenant&lt;/a&gt;\n&lt;/section&gt;\n\n&lt;section class=\"features\"&gt;\n    &lt;div class=\"feature\"&gt;\n        &lt;h3&gt;Simple&lt;/h3&gt;\n        &lt;p&gt;Int\u00e9gration facile avec la biblioth\u00e8que MVola API&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=\"feature\"&gt;\n        &lt;h3&gt;S\u00e9curis\u00e9&lt;/h3&gt;\n        &lt;p&gt;Transactions s\u00e9curis\u00e9es avec validation&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=\"feature\"&gt;\n        &lt;h3&gt;Rapide&lt;/h3&gt;\n        &lt;p&gt;Paiements instantan\u00e9s avec notifications&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n{% endblock %}\n</code></pre> <p>app/templates/payment.html:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block title %}Paiement - MVola Payment Demo{% endblock %}\n\n{% block content %}\n&lt;section class=\"payment-form\"&gt;\n    &lt;h2&gt;Effectuer un paiement&lt;/h2&gt;\n\n    &lt;form method=\"POST\" action=\"{{ url_for('payment.payment') }}\"&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"amount\"&gt;Montant (Ar)&lt;/label&gt;\n            &lt;input type=\"number\" id=\"amount\" name=\"amount\" min=\"100\" step=\"100\" \n                   value=\"{{ form_data.amount if form_data else 1000 }}\" required&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"phone_number\"&gt;Num\u00e9ro de t\u00e9l\u00e9phone&lt;/label&gt;\n            &lt;input type=\"text\" id=\"phone_number\" name=\"phone_number\" \n                   placeholder=\"0343500003\" \n                   value=\"{{ form_data.phone_number if form_data else '' }}\" required&gt;\n            &lt;small&gt;Format: 034XXXXXXX ou 038XXXXXXX&lt;/small&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"description\"&gt;Description&lt;/label&gt;\n            &lt;input type=\"text\" id=\"description\" name=\"description\" \n                   value=\"{{ form_data.description if form_data else 'Achat en ligne' }}\"&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"form-actions\"&gt;\n            &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Payer maintenant&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/section&gt;\n{% endblock %}\n</code></pre> <p>app/templates/status.html:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block title %}Statut du paiement - MVola Payment Demo{% endblock %}\n\n{% block content %}\n&lt;section class=\"payment-status\"&gt;\n    &lt;h2&gt;Statut du paiement&lt;/h2&gt;\n\n    &lt;div class=\"status-card\"&gt;\n        &lt;p&gt;ID de transaction: &lt;strong&gt;{{ transaction_id }}&lt;/strong&gt;&lt;/p&gt;\n\n        {% if status_info %}\n            &lt;div class=\"status-info\"&gt;\n                &lt;p&gt;Statut: &lt;strong&gt;{{ status_info.get('status', 'Inconnu') }}&lt;/strong&gt;&lt;/p&gt;\n                &lt;p&gt;Date: {{ status_info.get('date', 'N/A') }}&lt;/p&gt;\n                {% if status_info.get('status', '').lower() == 'completed' %}\n                    &lt;div class=\"success-message\"&gt;\n                        &lt;p&gt;Paiement r\u00e9ussi!&lt;/p&gt;\n                    &lt;/div&gt;\n                {% elif status_info.get('status', '').lower() in ['failed', 'rejected', 'cancelled'] %}\n                    &lt;div class=\"error-message\"&gt;\n                        &lt;p&gt;Le paiement a \u00e9chou\u00e9&lt;/p&gt;\n                    &lt;/div&gt;\n                {% else %}\n                    &lt;div class=\"pending-message\"&gt;\n                        &lt;p&gt;Paiement en attente&lt;/p&gt;\n                        &lt;p&gt;Veuillez confirmer sur votre t\u00e9l\u00e9phone&lt;/p&gt;\n                    &lt;/div&gt;\n                {% endif %}\n            &lt;/div&gt;\n        {% else %}\n            &lt;p&gt;En attente de confirmation...&lt;/p&gt;\n        {% endif %}\n\n        &lt;div class=\"status-actions\"&gt;\n            &lt;a href=\"{{ url_for('payment.status', check=1) }}\" class=\"btn btn-secondary\"&gt;V\u00e9rifier le statut&lt;/a&gt;\n            &lt;a href=\"{{ url_for('payment.index') }}\" class=\"btn btn-link\"&gt;Retour \u00e0 l'accueil&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n{% endblock %}\n\n{% block scripts %}\n&lt;script&gt;\n    // V\u00e9rifier automatiquement le statut toutes les 5 secondes\n    {% if not status_info or status_info.get('status', '').lower() not in ['completed', 'failed', 'rejected', 'cancelled'] %}\n    const checkInterval = 5000; // 5 secondes\n\n    function checkStatus() {\n        window.location.href = \"{{ url_for('payment.status', check=1) }}\";\n    }\n\n    // D\u00e9finir un timeout pour v\u00e9rifier le statut\n    setTimeout(checkStatus, checkInterval);\n    {% endif %}\n&lt;/script&gt;\n{% endblock %}\n</code></pre>"},{"location":"examples/web-integration/#point-dentree-de-lapplication","title":"Point d'entr\u00e9e de l'application","text":"<p>Cr\u00e9ons le point d'entr\u00e9e principal de l'application.</p> <p>run.py:</p> <pre><code>import os\nimport logging\nfrom app import create_app\n\n# Configuration du logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n# Cr\u00e9ation de l'application\napp = create_app()\n\nif __name__ == '__main__':\n    port = int(os.environ.get('PORT', 5000))\n    app.run(host='0.0.0.0', port=port, debug=True)\n</code></pre>"},{"location":"examples/web-integration/#fichier-denvironnement","title":"Fichier d'environnement","text":"<p>Cr\u00e9ez un fichier <code>.env</code> \u00e0 la racine du projet avec les configurations n\u00e9cessaires :</p> <pre><code>SECRET_KEY=votre_secret_key_generee_aleatoirement\nMVOLA_CONSUMER_KEY=votre_consumer_key\nMVOLA_CONSUMER_SECRET=votre_consumer_secret\nMVOLA_PARTNER_NAME=NOM_DU_PARTENAIRE\nMVOLA_PARTNER_MSISDN=0343500003\nMVOLA_SANDBOX=True\nWEBHOOK_BASE_URL=https://votre-domaine.com\n</code></pre> <p>Note: Pour les tests en d\u00e9veloppement local, vous pouvez utiliser un service comme ngrok pour cr\u00e9er un tunnel vers votre localhost et obtenir une URL publique temporaire pour les webhooks.</p>"},{"location":"examples/web-integration/#dependances-du-projet","title":"D\u00e9pendances du projet","text":"<p>Cr\u00e9ez un fichier <code>requirements.txt</code> \u00e0 la racine du projet :</p> <pre><code>flask==2.0.1\npython-dotenv==0.19.0\nmvola-api==1.0.0\ngunicorn==21.0.0\n</code></pre>"},{"location":"examples/web-integration/#lancement-de-lapplication","title":"Lancement de l'application","text":"<p>Pour lancer l'application en d\u00e9veloppement :</p> <pre><code>python run.py\n</code></pre> <p>Pour le d\u00e9ploiement en production, utilisez un serveur WSGI comme Gunicorn :</p> <pre><code>gunicorn -w 4 -b 0.0.0.0:5000 \"app:create_app()\"\n</code></pre>"},{"location":"examples/web-integration/#tests-et-debogage","title":"Tests et d\u00e9bogage","text":""},{"location":"examples/web-integration/#test-des-webhooks-en-local","title":"Test des webhooks en local","text":"<p>Pour tester les webhooks en d\u00e9veloppement local, vous pouvez utiliser ngrok :</p> <pre><code># Installation de ngrok (si ce n'est pas d\u00e9j\u00e0 fait)\npip install pyngrok\n\n# Dans un terminal s\u00e9par\u00e9, lancez ngrok\nngrok http 5000\n</code></pre> <p>Utilisez l'URL fournie par ngrok comme valeur pour <code>WEBHOOK_BASE_URL</code> dans votre fichier <code>.env</code>.</p>"},{"location":"examples/web-integration/#simulations-de-paiement","title":"Simulations de paiement","text":"<p>Vous pouvez simuler des paiements en utilisant l'environnement sandbox de MVola. Dans cet environnement, les transactions sont simul\u00e9es sans mouvement d'argent r\u00e9el.</p>"},{"location":"examples/web-integration/#conclusion","title":"Conclusion","text":"<p>Cette int\u00e9gration web montre comment :</p> <ol> <li>Initialiser la biblioth\u00e8que MVola API dans une application Flask</li> <li>Cr\u00e9er un formulaire de paiement pour les utilisateurs</li> <li>G\u00e9rer le flux de paiement complet</li> <li>Recevoir et traiter les notifications via webhooks</li> </ol> <p>Vous pouvez adapter ce code \u00e0 votre framework web pr\u00e9f\u00e9r\u00e9 en suivant les m\u00eames principes.</p>"},{"location":"examples/web-integration/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<p>Pour compl\u00e9ter votre int\u00e9gration, consultez:</p> <ul> <li>Guide de gestion des webhooks pour plus de d\u00e9tails sur les notifications</li> <li>Gestion des erreurs pour une meilleure gestion des cas d'erreur </li> </ul>"},{"location":"examples/webhook-handling/","title":"Gestion des Webhooks","text":"<p>Ce guide explique comment configurer et g\u00e9rer les webhooks pour les notifications de transactions MVola dans votre application.</p>"},{"location":"examples/webhook-handling/#quest-ce-quun-webhook","title":"Qu'est-ce qu'un webhook?","text":"<p>Un webhook est un m\u00e9canisme qui permet \u00e0 MVola d'envoyer automatiquement des notifications \u00e0 votre application lorsqu'un \u00e9v\u00e9nement se produit, comme un changement de statut de transaction. Au lieu de v\u00e9rifier p\u00e9riodiquement le statut d'une transaction (polling), votre serveur re\u00e7oit une notification d\u00e8s que le statut change.</p>"},{"location":"examples/webhook-handling/#architecture-des-webhooks","title":"Architecture des webhooks","text":"<p>Voici comment les webhooks fonctionnent avec MVola:</p> <ol> <li>Lors de l'initiation d'une transaction, vous fournissez une URL de callback</li> <li>Le client confirme la transaction sur son t\u00e9l\u00e9phone mobile</li> <li>MVola traite la transaction et met \u00e0 jour son statut</li> <li>MVola envoie une notification \u00e0 votre URL de callback avec les d\u00e9tails de la transaction</li> <li>Votre serveur traite cette notification et met \u00e0 jour vos syst\u00e8mes</li> </ol> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Votre  \u2502         \u2502  API    \u2502         \u2502 Mobile  \u2502\n\u2502 Serveur \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502  MVola  \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502 Client  \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502                                        \u25b2\n     \u2502                                        \u2502\n     \u2502                                        \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            Notification par webhook\n</code></pre>"},{"location":"examples/webhook-handling/#configuration-dun-callback-url","title":"Configuration d'un callback URL","text":"<p>Lorsque vous initiez un paiement, vous devez sp\u00e9cifier une URL de callback:</p> <pre><code>from mvola_api import MVolaClient\n\nclient = MVolaClient(\n    consumer_key=\"votre_consumer_key\",\n    consumer_secret=\"votre_consumer_secret\",\n    partner_name=\"NOM_DU_PARTENAIRE\",\n    partner_msisdn=\"0343500003\",\n    sandbox=True\n)\n\ntransaction_info = client.initiate_payment(\n    amount=1000,\n    debit_msisdn=\"0343500003\",\n    credit_msisdn=\"0343500004\",\n    reference=\"REF123456\",\n    description=\"Paiement produit\",\n    callback_url=\"https://votre-domaine.com/webhooks/mvola/callback\"\n)\n</code></pre> <p>Cette URL doit \u00eatre accessible publiquement sur Internet pour que MVola puisse y envoyer des requ\u00eates.</p>"},{"location":"examples/webhook-handling/#format-des-notifications-de-webhook","title":"Format des notifications de webhook","text":"<p>MVola envoie des notifications au format JSON. Voici un exemple typique:</p> <pre><code>{\n  \"transactionId\": \"12345678-1234-1234-1234-123456789012\",\n  \"status\": \"completed\",\n  \"amount\": 1000,\n  \"currency\": \"Ar\",\n  \"financialTransactionId\": \"12345678\",\n  \"externalId\": \"REF123456\",\n  \"reason\": \"Paiement accept\u00e9\",\n  \"debitParty\": [\n    {\n      \"key\": \"msisdn\",\n      \"value\": \"0343500003\"\n    }\n  ],\n  \"creditParty\": [\n    {\n      \"key\": \"msisdn\",\n      \"value\": \"0343500004\"\n    }\n  ],\n  \"timestamp\": \"2024-07-24T10:15:30.000Z\"\n}\n</code></pre> <p>Les statuts possibles incluent: - <code>pending</code>: La transaction est en attente de confirmation - <code>completed</code>: La transaction a \u00e9t\u00e9 trait\u00e9e avec succ\u00e8s - <code>failed</code>: La transaction a \u00e9chou\u00e9 - <code>rejected</code>: La transaction a \u00e9t\u00e9 rejet\u00e9e par le client - <code>cancelled</code>: La transaction a \u00e9t\u00e9 annul\u00e9e</p>"},{"location":"examples/webhook-handling/#creation-dun-endpoint-de-webhook","title":"Cr\u00e9ation d'un endpoint de webhook","text":""},{"location":"examples/webhook-handling/#avec-flask","title":"Avec Flask","text":"<p>Voici un exemple d'endpoint pour recevoir les notifications avec Flask:</p> <pre><code>from flask import Blueprint, request, jsonify\nimport logging\nimport json\n\nwebhook_bp = Blueprint('webhook', __name__, url_prefix='/webhooks')\nlogger = logging.getLogger('webhook')\n\n@webhook_bp.route('/mvola/callback', methods=['POST'])\ndef mvola_callback():\n    # R\u00e9cup\u00e9rer les donn\u00e9es du webhook\n    webhook_data = request.get_json()\n\n    if not webhook_data:\n        logger.error(\"Donn\u00e9es de webhook invalides ou vides\")\n        return jsonify({\"status\": \"error\", \"message\": \"Invalid data\"}), 400\n\n    # Enregistrer les donn\u00e9es pour d\u00e9bogage\n    logger.info(f\"Webhook re\u00e7u: {json.dumps(webhook_data)}\")\n\n    # Extraire les informations importantes\n    transaction_id = webhook_data.get('transactionId')\n    status = webhook_data.get('status')\n    amount = webhook_data.get('amount')\n    debit_party = webhook_data.get('debitParty', [])\n    debit_msisdn = next((item.get('value') for item in debit_party \n                         if item.get('key') == 'msisdn'), None)\n\n    # Traiter selon le statut\n    if status == 'completed':\n        # La transaction a r\u00e9ussi\n        logger.info(f\"Transaction {transaction_id} compl\u00e9t\u00e9e avec succ\u00e8s\")\n        # Mettre \u00e0 jour votre base de donn\u00e9es, envoyer un email, etc.\n        update_transaction_status(transaction_id, status)\n        send_confirmation_email(debit_msisdn, amount)\n\n    elif status in ['failed', 'rejected', 'cancelled']:\n        # La transaction a \u00e9chou\u00e9\n        logger.warning(f\"Transaction {transaction_id} a \u00e9chou\u00e9: {status}\")\n        update_transaction_status(transaction_id, status)\n        send_failure_notification(debit_msisdn, amount, status)\n\n    # Toujours retourner un succ\u00e8s (HTTP 200) pour indiquer que vous avez re\u00e7u la notification\n    return jsonify({\"status\": \"success\"}), 200\n\ndef update_transaction_status(transaction_id, status):\n    # Impl\u00e9mentez la mise \u00e0 jour de votre base de donn\u00e9es\n    pass\n\ndef send_confirmation_email(msisdn, amount):\n    # Envoyez un email de confirmation\n    pass\n\ndef send_failure_notification(msisdn, amount, reason):\n    # Envoyez une notification d'\u00e9chec\n    pass\n</code></pre>"},{"location":"examples/webhook-handling/#avec-django","title":"Avec Django","text":"<p>Voici un exemple avec Django:</p> <pre><code># urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('webhooks/mvola/callback', views.mvola_callback, name='mvola_callback'),\n]\n\n# views.py\nimport json\nimport logging\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_POST\n\nlogger = logging.getLogger('mvola_webhooks')\n\n@csrf_exempt  # Important: les webhooks externes ne peuvent pas fournir de token CSRF\n@require_POST\ndef mvola_callback(request):\n    try:\n        webhook_data = json.loads(request.body)\n    except json.JSONDecodeError:\n        logger.error(\"Donn\u00e9es JSON invalides\")\n        return JsonResponse({\"status\": \"error\", \"message\": \"Invalid JSON\"}, status=400)\n\n    # Traiter les donn\u00e9es comme dans l'exemple Flask\n    transaction_id = webhook_data.get('transactionId')\n    status = webhook_data.get('status')\n\n    # Logique de traitement des statuts...\n\n    return JsonResponse({\"status\": \"success\"})\n</code></pre>"},{"location":"examples/webhook-handling/#securisation-des-webhooks","title":"S\u00e9curisation des webhooks","text":"<p>Pour s\u00e9curiser vos webhooks:</p>"},{"location":"examples/webhook-handling/#validation-de-la-source","title":"Validation de la source","text":"<p>Vous pouvez valider que les requ\u00eates proviennent bien de MVola en v\u00e9rifiant les adresses IP ou en impl\u00e9mentant une authentification:</p> <pre><code>def is_valid_mvola_request(request):\n    # Liste des IPs autoris\u00e9es (exemple fictif - \u00e0 remplacer par les vraies IPs de MVola)\n    allowed_ips = ['203.0.113.1', '203.0.113.2']\n    client_ip = request.remote_addr\n\n    return client_ip in allowed_ips\n\n@webhook_bp.route('/mvola/callback', methods=['POST'])\ndef mvola_callback():\n    if not is_valid_mvola_request(request):\n        logger.warning(f\"Tentative d'acc\u00e8s non autoris\u00e9e depuis {request.remote_addr}\")\n        return jsonify({\"status\": \"error\", \"message\": \"Unauthorized\"}), 403\n\n    # Suite du traitement...\n</code></pre>"},{"location":"examples/webhook-handling/#verification-des-transactions","title":"V\u00e9rification des transactions","text":"<p>Validez syst\u00e9matiquement les donn\u00e9es re\u00e7ues en les comparant avec vos enregistrements:</p> <pre><code>def validate_transaction(transaction_id, amount, debit_msisdn):\n    # R\u00e9cup\u00e9rer la transaction depuis votre base de donn\u00e9es\n    stored_transaction = get_transaction_from_db(transaction_id)\n\n    if not stored_transaction:\n        logger.warning(f\"Transaction inconnue: {transaction_id}\")\n        return False\n\n    # V\u00e9rifier que les d\u00e9tails correspondent\n    if (stored_transaction.amount != amount or \n        stored_transaction.debit_msisdn != debit_msisdn):\n        logger.warning(f\"D\u00e9tails de transaction non concordants: {transaction_id}\")\n        return False\n\n    return True\n</code></pre>"},{"location":"examples/webhook-handling/#gestion-des-erreurs-et-retransmissions","title":"Gestion des erreurs et retransmissions","text":"<p>MVola peut retransmettre les notifications en cas d'\u00e9chec. Votre endpoint doit \u00eatre idempotent, c'est-\u00e0-dire qu'il doit pouvoir recevoir plusieurs fois la m\u00eame notification sans causer de probl\u00e8mes:</p> <pre><code>def process_transaction_completion(transaction_id, status):\n    # V\u00e9rifier si la transaction a d\u00e9j\u00e0 \u00e9t\u00e9 trait\u00e9e\n    if is_transaction_already_processed(transaction_id):\n        logger.info(f\"Transaction {transaction_id} d\u00e9j\u00e0 trait\u00e9e, ignor\u00e9e\")\n        return\n\n    # Traiter la transaction et marquer comme trait\u00e9e\n    mark_transaction_as_processed(transaction_id, status)\n    # D\u00e9clencher les actions correspondantes\n    trigger_post_payment_actions(transaction_id)\n</code></pre>"},{"location":"examples/webhook-handling/#test-des-webhooks-en-developpement","title":"Test des webhooks en d\u00e9veloppement","text":"<p>Pour tester les webhooks en d\u00e9veloppement local:</p>"},{"location":"examples/webhook-handling/#utilisation-de-ngrok","title":"Utilisation de ngrok","text":"<p>ngrok vous permet d'exposer votre serveur local \u00e0 Internet:</p> <pre><code># Installer ngrok\npip install pyngrok\n\n# Exposer votre serveur local (ex: port 5000)\nngrok http 5000\n</code></pre> <p>ngrok vous fournira une URL publique (ex: <code>https://abc123.ngrok.io</code>) que vous pourrez utiliser comme URL de callback.</p>"},{"location":"examples/webhook-handling/#utilisation-de-requestbin","title":"Utilisation de requestbin","text":"<p>RequestBin permet de capturer et d'inspecter les requ\u00eates HTTP:</p> <ol> <li>Cr\u00e9ez un nouveau bin sur RequestBin</li> <li>Utilisez l'URL fournie comme URL de callback</li> <li>Visualisez les requ\u00eates re\u00e7ues dans l'interface web</li> </ol>"},{"location":"examples/webhook-handling/#simulation-de-webhooks","title":"Simulation de webhooks","text":"<p>Vous pouvez simuler des webhooks pour tester votre logique de traitement:</p> <pre><code># test_webhooks.py\nimport requests\nimport json\n\ndef simulate_webhook(callback_url, transaction_id, status):\n    # Cr\u00e9er un payload de test\n    webhook_data = {\n        \"transactionId\": transaction_id,\n        \"status\": status,\n        \"amount\": 1000,\n        \"currency\": \"Ar\",\n        \"financialTransactionId\": \"12345678\",\n        \"externalId\": \"REF123456\",\n        \"debitParty\": [\n            {\n                \"key\": \"msisdn\",\n                \"value\": \"0343500003\"\n            }\n        ],\n        \"creditParty\": [\n            {\n                \"key\": \"msisdn\",\n                \"value\": \"0343500004\"\n            }\n        ],\n        \"timestamp\": \"2024-07-24T10:15:30.000Z\"\n    }\n\n    # Envoyer la requ\u00eate\n    response = requests.post(\n        callback_url,\n        json=webhook_data,\n        headers={\"Content-Type\": \"application/json\"}\n    )\n\n    print(f\"Statut: {response.status_code}\")\n    print(f\"R\u00e9ponse: {response.text}\")\n\n# Simuler diff\u00e9rents statuts\nsimulate_webhook(\"http://localhost:5000/webhooks/mvola/callback\", \"test-123\", \"pending\")\nsimulate_webhook(\"http://localhost:5000/webhooks/mvola/callback\", \"test-123\", \"completed\")\nsimulate_webhook(\"http://localhost:5000/webhooks/mvola/callback\", \"test-456\", \"failed\")\n</code></pre>"},{"location":"examples/webhook-handling/#journalisation-et-monitoring","title":"Journalisation et monitoring","text":"<p>Impl\u00e9mentez une journalisation compl\u00e8te pour faciliter le d\u00e9bogage:</p> <pre><code>import logging\n\n# Configuration du logger\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('webhooks.log'),\n        logging.StreamHandler()\n    ]\n)\n\nlogger = logging.getLogger('mvola_webhooks')\n\n# Dans le handler de webhook\n@webhook_bp.route('/mvola/callback', methods=['POST'])\ndef mvola_callback():\n    webhook_data = request.get_json()\n\n    # Journalisation compl\u00e8te\n    logger.info(f\"Webhook re\u00e7u: {json.dumps(webhook_data)}\")\n\n    # Traitement...\n\n    # Journalisation du r\u00e9sultat\n    logger.info(f\"Webhook trait\u00e9 avec succ\u00e8s pour la transaction {webhook_data.get('transactionId')}\")\n\n    return jsonify({\"status\": \"success\"}), 200\n</code></pre>"},{"location":"examples/webhook-handling/#webhooks-dans-un-environnement-de-production","title":"Webhooks dans un environnement de production","text":"<p>Pour un environnement de production:</p> <ol> <li>Utiliser HTTPS: Assurez-vous que votre endpoint est accessible en HTTPS</li> <li>Ajouter une surveillance: Mettez en place des alertes en cas d'erreur de traitement</li> <li>Impl\u00e9menter des retries: Si votre logique interne \u00e9choue, mettez en place un m\u00e9canisme de retry</li> <li>Configurer des timeouts: Limitez le temps de traitement des webhooks pour \u00e9viter les longues op\u00e9rations</li> <li>Utiliser des queues: Enregistrez les notifications dans une queue pour un traitement asynchrone</li> </ol>"},{"location":"examples/webhook-handling/#exemple-complet-dintegration","title":"Exemple complet d'int\u00e9gration","text":"<p>Voici un exemple complet qui int\u00e8gre toutes les bonnes pratiques:</p> <pre><code>import json\nimport logging\nimport time\nfrom flask import Blueprint, request, jsonify\nfrom threading import Thread\nfrom queue import Queue\n\n# Configuration du logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger('mvola_webhooks')\n\n# File d'attente pour le traitement asynchrone\nwebhook_queue = Queue()\n\nwebhook_bp = Blueprint('webhook', __name__, url_prefix='/webhooks')\n\n@webhook_bp.route('/mvola/callback', methods=['POST'])\ndef mvola_callback():\n    start_time = time.time()\n\n    # 1. Validation de base\n    if not request.is_json:\n        logger.error(\"Content-Type non JSON\")\n        return jsonify({\"status\": \"error\", \"message\": \"Content-Type must be application/json\"}), 400\n\n    webhook_data = request.get_json()\n\n    if not webhook_data:\n        logger.error(\"Donn\u00e9es de webhook vides\")\n        return jsonify({\"status\": \"error\", \"message\": \"Empty payload\"}), 400\n\n    # 2. Validation minimale des donn\u00e9es requises\n    transaction_id = webhook_data.get('transactionId')\n    status = webhook_data.get('status')\n\n    if not transaction_id or not status:\n        logger.error(f\"Donn\u00e9es incompl\u00e8tes: {json.dumps(webhook_data)}\")\n        return jsonify({\"status\": \"error\", \"message\": \"Missing required fields\"}), 400\n\n    # 3. Journalisation\n    logger.info(f\"Webhook re\u00e7u pour transaction {transaction_id}, statut: {status}\")\n\n    # 4. Traitement asynchrone pour \u00e9viter de bloquer la r\u00e9ponse\n    webhook_queue.put(webhook_data)\n\n    # 5. R\u00e9pondre rapidement\n    processing_time = time.time() - start_time\n    logger.info(f\"Webhook mis en file d'attente en {processing_time:.3f}s\")\n\n    return jsonify({\n        \"status\": \"success\", \n        \"message\": \"Webhook received and queued for processing\",\n        \"transaction_id\": transaction_id\n    }), 200\n\n# Traitement des webhooks en arri\u00e8re-plan\ndef process_webhook_queue():\n    while True:\n        try:\n            # R\u00e9cup\u00e9rer le prochain webhook \u00e0 traiter\n            webhook_data = webhook_queue.get()\n\n            if not webhook_data:\n                continue\n\n            transaction_id = webhook_data.get('transactionId')\n            status = webhook_data.get('status')\n\n            logger.info(f\"Traitement du webhook pour transaction {transaction_id}\")\n\n            # V\u00e9rifier si la transaction existe et n'a pas d\u00e9j\u00e0 \u00e9t\u00e9 trait\u00e9e\n            transaction = get_transaction(transaction_id)\n\n            if not transaction:\n                logger.warning(f\"Transaction inconnue: {transaction_id}\")\n                webhook_queue.task_done()\n                continue\n\n            if transaction.status == status:\n                logger.info(f\"Transaction {transaction_id} d\u00e9j\u00e0 dans l'\u00e9tat {status}, ignor\u00e9e\")\n                webhook_queue.task_done()\n                continue\n\n            # Traiter selon le statut\n            if status == 'completed':\n                # Marquer la commande comme pay\u00e9e, envoyer confirmation, etc.\n                complete_order(transaction)\n                logger.info(f\"Transaction {transaction_id} compl\u00e9t\u00e9e et trait\u00e9e\")\n\n            elif status in ['failed', 'rejected', 'cancelled']:\n                # Marquer la commande comme \u00e9chou\u00e9e\n                fail_order(transaction, status)\n                logger.info(f\"Transaction {transaction_id} \u00e9chou\u00e9e: {status}\")\n\n            # Mettre \u00e0 jour le statut dans la base de donn\u00e9es\n            update_transaction_status(transaction_id, status)\n\n            # Signaler que le traitement est termin\u00e9\n            webhook_queue.task_done()\n\n        except Exception as e:\n            logger.exception(f\"Erreur lors du traitement du webhook: {e}\")\n            # Continuer \u00e0 traiter les autres webhooks m\u00eame en cas d'erreur\n\n# D\u00e9marrer le thread de traitement\nwebhook_processor = Thread(target=process_webhook_queue, daemon=True)\nwebhook_processor.start()\n\n# Fonctions fictives \u00e0 impl\u00e9menter selon votre application\ndef get_transaction(transaction_id):\n    # R\u00e9cup\u00e9rer la transaction depuis la base de donn\u00e9es\n    pass\n\ndef update_transaction_status(transaction_id, status):\n    # Mettre \u00e0 jour le statut dans la base de donn\u00e9es\n    pass\n\ndef complete_order(transaction):\n    # Marquer la commande comme pay\u00e9e\n    pass\n\ndef fail_order(transaction, reason):\n    # Marquer la commande comme \u00e9chou\u00e9e\n    pass\n</code></pre>"},{"location":"examples/webhook-handling/#conclusion","title":"Conclusion","text":"<p>Les webhooks sont un m\u00e9canisme puissant pour construire des int\u00e9grations robustes avec MVola. En suivant ces bonnes pratiques, vous pourrez:</p> <ol> <li>Recevoir des notifications en temps r\u00e9el sur les changements de statut des transactions</li> <li>Traiter ces notifications de mani\u00e8re fiable et s\u00e9curis\u00e9e</li> <li>Automatiser vos processus m\u00e9tier en fonction des paiements</li> </ol>"},{"location":"examples/webhook-handling/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<ul> <li>Consultez le guide Int\u00e9gration Web pour voir comment impl\u00e9menter une solution de paiement compl\u00e8te</li> <li>Explorez la gestion des erreurs pour rendre votre syst\u00e8me encore plus robuste </li> </ul>"},{"location":"explanation/architecture/","title":"Architecture de la biblioth\u00e8que MVola API","text":"<p>Cette page explique l'architecture interne de la biblioth\u00e8que MVola API, sa conception, et les d\u00e9cisions prises lors de son d\u00e9veloppement.</p>"},{"location":"explanation/architecture/#vue-densemble-de-larchitecture","title":"Vue d'ensemble de l'architecture","text":"<p>La biblioth\u00e8que MVola API est con\u00e7ue selon un mod\u00e8le \u00e0 plusieurs couches :</p> <pre><code>+------------------------------------------+\n|            MVolaClient                   |  &lt;- Interface publique principale\n+------------------------------------------+\n          |                  |\n          v                  v\n+------------------+  +------------------+\n|    MVolaAuth     |  | MVolaTransaction |  &lt;- Modules sp\u00e9cialis\u00e9s\n+------------------+  +------------------+\n          |                  |\n          v                  v\n+------------------------------------------+\n|          Couche HTTP (requests)          |  &lt;- Communication HTTP\n+------------------------------------------+\n          |\n          v\n+------------------------------------------+\n|            API MVola (externe)           |  &lt;- API externe\n+------------------------------------------+\n</code></pre>"},{"location":"explanation/architecture/#principes-de-conception","title":"Principes de conception","text":"<p>La biblioth\u00e8que a \u00e9t\u00e9 con\u00e7ue avec les principes suivants :</p> <ol> <li>Separation of Concerns (SoC) - Chaque module a une responsabilit\u00e9 claire et distincte</li> <li>Interface intuitive - API simple et facile \u00e0 utiliser pour les d\u00e9veloppeurs</li> <li>Robustesse - Gestion compl\u00e8te des erreurs et validation des donn\u00e9es</li> <li>Flexibilit\u00e9 - Support des environnements sandbox et production</li> </ol>"},{"location":"explanation/architecture/#composants-principaux","title":"Composants principaux","text":""},{"location":"explanation/architecture/#mvolaclient","title":"MVolaClient","text":"<p>Le client est le point d'entr\u00e9e principal de la biblioth\u00e8que. Il : - Coordonne les interactions entre les diff\u00e9rents modules - Fournit une interface simplifi\u00e9e pour les op\u00e9rations courantes - G\u00e8re la journalisation et les param\u00e8tres globaux</p>"},{"location":"explanation/architecture/#mvolaauth","title":"MVolaAuth","text":"<p>Le module d'authentification : - G\u00e8re la g\u00e9n\u00e9ration de tokens OAuth - Maintient l'\u00e9tat du token et g\u00e8re son expiration - Rafra\u00eechit automatiquement le token lorsque n\u00e9cessaire</p>"},{"location":"explanation/architecture/#mvolatransaction","title":"MVolaTransaction","text":"<p>Le module de transaction : - Impl\u00e9mente les op\u00e9rations de paiement marchand - G\u00e8re la validation des param\u00e8tres de transaction - Fournit des m\u00e9thodes pour v\u00e9rifier le statut et les d\u00e9tails des transactions</p>"},{"location":"explanation/architecture/#gestion-des-erreurs","title":"Gestion des erreurs","text":"<p>Le syst\u00e8me de gestion des erreurs utilise une hi\u00e9rarchie d'exceptions : - <code>MVolaError</code> - Classe de base pour toutes les erreurs - <code>MVolaAuthError</code> - Erreurs li\u00e9es \u00e0 l'authentification - <code>MVolaTransactionError</code> - Erreurs li\u00e9es aux transactions - <code>MVolaValidationError</code> - Erreurs de validation des param\u00e8tres - <code>MVolaConnectionError</code> - Erreurs de connexion r\u00e9seau</p>"},{"location":"explanation/architecture/#flux-de-donnees","title":"Flux de donn\u00e9es","text":"<ol> <li> <p>Authentification :    <pre><code>MVolaClient \u2192 MVolaAuth \u2192 API MVola \u2192 Token d'acc\u00e8s \u2192 Stock\u00e9 dans MVolaAuth\n</code></pre></p> </li> <li> <p>Initiation de paiement :    <pre><code>MVolaClient \u2192 MVolaTransaction \u2192 Validation des param\u00e8tres \u2192 \nMVolaTransaction demande token \u00e0 MVolaAuth \u2192 \nMVolaTransaction envoie requ\u00eate \u00e0 API MVola \u2192 \nR\u00e9sultat retourn\u00e9 \u00e0 MVolaClient\n</code></pre></p> </li> <li> <p>V\u00e9rification de statut :    <pre><code>MVolaClient \u2192 MVolaTransaction \u2192 \nMVolaTransaction demande token \u00e0 MVolaAuth \u2192 \nMVolaTransaction envoie requ\u00eate \u00e0 API MVola \u2192 \nR\u00e9sultat retourn\u00e9 \u00e0 MVolaClient\n</code></pre></p> </li> </ol>"},{"location":"explanation/architecture/#considerations-de-performances","title":"Consid\u00e9rations de performances","text":"<ul> <li>R\u00e9utilisation des tokens - Les tokens sont r\u00e9utilis\u00e9s jusqu'\u00e0 leur expiration</li> <li>Validation pr\u00e9coce - Les param\u00e8tres sont valid\u00e9s avant d'envoyer des requ\u00eates pour \u00e9viter des appels API inutiles</li> <li>Journalisation configurable - Permet d'ajuster le niveau de journalisation selon les besoins</li> </ul>"},{"location":"explanation/architecture/#securite","title":"S\u00e9curit\u00e9","text":"<ul> <li>Pas de stockage persistant de credentials - Les identifiants ne sont jamais \u00e9crits sur disque</li> <li>Communication HTTPS - Toutes les communications avec l'API MVola utilisent HTTPS</li> <li>Validation des entr\u00e9es - Toutes les entr\u00e9es utilisateur sont valid\u00e9es avant utilisation</li> </ul>"},{"location":"explanation/architecture/#evolutivite","title":"\u00c9volutivit\u00e9","text":"<p>La biblioth\u00e8que est con\u00e7ue pour \u00e9voluer facilement : - Ajout de nouveaux endpoints API - Support de nouvelles fonctionnalit\u00e9s MVola - Extension \u00e0 d'autres services de paiement mobile</p>"},{"location":"explanation/architecture/#defis-techniques","title":"D\u00e9fis techniques","text":"<p>Lors du d\u00e9veloppement, plusieurs d\u00e9fis ont \u00e9t\u00e9 relev\u00e9s : - Gestion coh\u00e9rente des erreurs provenant de l'API MVola - Conception d'une API intuitive tout en exposant les fonctionnalit\u00e9s n\u00e9cessaires - \u00c9quilibre entre simplicit\u00e9 d'utilisation et flexibilit\u00e9 </p>"},{"location":"guides/authentication/","title":"Guide d'authentification","text":"<p>Ce guide vous explique comment configurer et g\u00e9rer l'authentification avec l'API MVola en utilisant la biblioth\u00e8que MVola API.</p>"},{"location":"guides/authentication/#obtenir-les-identifiants-api","title":"Obtenir les identifiants API","text":"<p>Avant de pouvoir vous authentifier aupr\u00e8s de l'API MVola, vous devez obtenir vos identifiants API (Consumer Key et Consumer Secret) :</p> <ol> <li>Cr\u00e9ez un compte sur le Portail D\u00e9veloppeur MVola</li> <li>Cr\u00e9ez une nouvelle application dans votre tableau de bord d\u00e9veloppeur</li> <li>Notez votre <code>Consumer Key</code> et <code>Consumer Secret</code></li> </ol>"},{"location":"guides/authentication/#types-denvironnements","title":"Types d'environnements","text":"<p>MVola offre deux environnements distincts :</p> <ul> <li>Sandbox : Environnement de test et de d\u00e9veloppement</li> <li>Production : Environnement de production pour les applications en direct</li> </ul>"},{"location":"guides/authentication/#differences-entre-les-environnements","title":"Diff\u00e9rences entre les environnements","text":"Caract\u00e9ristique Sandbox Production Transactions r\u00e9elles Non Oui Limites de transaction Illimit\u00e9es Selon la r\u00e9glementation URL de base api-uat.orange.mg api.orange.mg N\u00e9cessite validation Non Oui"},{"location":"guides/authentication/#configuration-de-lauthentification","title":"Configuration de l'authentification","text":""},{"location":"guides/authentication/#initialisation-directe","title":"Initialisation directe","text":"<pre><code>from mvola_api import MVolaClient\n\n# Initialisation pour l'environnement sandbox\nclient = MVolaClient(\n    consumer_key=\"votre_consumer_key\",\n    consumer_secret=\"votre_consumer_secret\",\n    partner_name=\"Nom de votre application\",\n    partner_msisdn=\"0343500003\",  # Votre num\u00e9ro MVola\n    sandbox=True  # Pour l'environnement de test\n)\n</code></pre>"},{"location":"guides/authentication/#utilisation-des-variables-denvironnement","title":"Utilisation des variables d'environnement","text":"<p>Pour une meilleure s\u00e9curit\u00e9, il est recommand\u00e9 de stocker vos identifiants dans des variables d'environnement :</p> <p>Cr\u00e9ez un fichier <code>.env</code> \u00e0 la racine de votre projet :</p> <pre><code>MVOLA_CONSUMER_KEY=votre_consumer_key\nMVOLA_CONSUMER_SECRET=votre_consumer_secret\nMVOLA_PARTNER_NAME=Nom de votre application\nMVOLA_PARTNER_MSISDN=0343500003\nMVOLA_SANDBOX=True\n</code></pre> <p>Puis, dans votre code :</p> <pre><code>import os\nfrom dotenv import load_dotenv\nfrom mvola_api import MVolaClient\n\n# Charger les variables d'environnement\nload_dotenv()\n\n# Initialisation avec les variables d'environnement\nclient = MVolaClient(\n    consumer_key=os.getenv(\"MVOLA_CONSUMER_KEY\"),\n    consumer_secret=os.getenv(\"MVOLA_CONSUMER_SECRET\"),\n    partner_name=os.getenv(\"MVOLA_PARTNER_NAME\"),\n    partner_msisdn=os.getenv(\"MVOLA_PARTNER_MSISDN\"),\n    sandbox=os.getenv(\"MVOLA_SANDBOX\", \"True\").lower() == \"true\"\n)\n</code></pre>"},{"location":"guides/authentication/#gestion-des-tokens","title":"Gestion des tokens","text":""},{"location":"guides/authentication/#comment-la-bibliotheque-gere-les-tokens","title":"Comment la biblioth\u00e8que g\u00e8re les tokens","text":"<p>La biblioth\u00e8que MVola API g\u00e8re automatiquement les tokens d'authentification pour vous :</p> <ol> <li>La premi\u00e8re fois que vous effectuez une op\u00e9ration, un token est g\u00e9n\u00e9r\u00e9</li> <li>Ce token est stock\u00e9 en m\u00e9moire</li> <li>Pour les op\u00e9rations suivantes, le token existant est utilis\u00e9</li> <li>Si le token est expir\u00e9, un nouveau token est g\u00e9n\u00e9r\u00e9 automatiquement</li> </ol> <p>Vous n'avez g\u00e9n\u00e9ralement pas besoin de manipuler les tokens directement.</p>"},{"location":"guides/authentication/#cycle-de-vie-des-tokens","title":"Cycle de vie des tokens","text":"<pre><code># Le token est g\u00e9n\u00e9r\u00e9 automatiquement lors de la premi\u00e8re utilisation\ntransaction_info = client.initiate_payment(...)\n\n# Pour acc\u00e9der manuellement au token (rarement n\u00e9cessaire)\ntoken = client.auth.get_valid_token()\nprint(f\"Token: {token['access_token']}\")\nprint(f\"Expire dans: {token['expires_in']} secondes\")\n\n# V\u00e9rifier si un token est expir\u00e9\nis_expired = client.auth.is_token_expired()\nprint(f\"Token expir\u00e9: {is_expired}\")\n\n# Forcer le rafra\u00eechissement du token\nclient.auth.refresh_token()\n</code></pre>"},{"location":"guides/authentication/#gestion-des-erreurs-dauthentification","title":"Gestion des erreurs d'authentification","text":"<p>Les erreurs d'authentification sont g\u00e9r\u00e9es par des exceptions sp\u00e9cifiques :</p> <pre><code>from mvola_api.exceptions import MVolaAuthError, MVolaInvalidCredentialsError\n\ntry:\n    # Une op\u00e9ration qui n\u00e9cessite une authentification\n    client.initiate_payment(\n        amount=1000,\n        debit_msisdn=\"0343500003\",\n        credit_msisdn=\"0343500004\",\n        reference=\"REF123456\",\n        description=\"Paiement test\"\n    )\nexcept MVolaInvalidCredentialsError as e:\n    print(f\"Identifiants API invalides: {e}\")\n    # V\u00e9rifiez vos consumer_key et consumer_secret\nexcept MVolaAuthError as e:\n    print(f\"Erreur d'authentification: {e}\")\n    # G\u00e9rer les autres erreurs d'authentification\n</code></pre>"},{"location":"guides/authentication/#bonnes-pratiques-de-securite","title":"Bonnes pratiques de s\u00e9curit\u00e9","text":"<ol> <li>Ne stockez jamais les identifiants API dans le code source - Utilisez des variables d'environnement ou un service de gestion de secrets</li> <li>Ne partagez jamais vos identifiants API - Chaque application doit avoir ses propres identifiants</li> <li>Utilisez HTTPS pour toutes les communications - La biblioth\u00e8que MVola API le fait automatiquement</li> <li>Impl\u00e9mentez un syst\u00e8me de rotation des identifiants pour les applications de production</li> <li>Journalisez les tentatives d'authentification \u00e9chou\u00e9es pour d\u00e9tecter les abus potentiels</li> </ol>"},{"location":"guides/authentication/#passage-en-production","title":"Passage en production","text":"<p>Lorsque vous \u00eates pr\u00eat \u00e0 passer en production :</p> <ol> <li>Obtenez des identifiants API de production aupr\u00e8s de MVola</li> <li>Mettez \u00e0 jour votre configuration pour utiliser <code>sandbox=False</code></li> <li>Assurez-vous que votre application respecte toutes les exigences de s\u00e9curit\u00e9</li> <li>Effectuez des tests de bout en bout avec des montants minimes avant de manipuler des transactions plus importantes</li> </ol>"},{"location":"guides/authentication/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<p>Une fois l'authentification configur\u00e9e, vous pouvez commencer \u00e0 effectuer des transactions. Consultez le Guide des transactions pour apprendre \u00e0 initier des paiements et \u00e0 v\u00e9rifier leur statut. </p>"},{"location":"guides/error-handling/","title":"Guide de gestion des erreurs","text":"<p>Ce guide explique comment g\u00e9rer efficacement les erreurs qui peuvent survenir lors de l'utilisation de la biblioth\u00e8que MVola API.</p>"},{"location":"guides/error-handling/#introduction","title":"Introduction","text":"<p>La biblioth\u00e8que MVola API utilise un syst\u00e8me d'exceptions hi\u00e9rarchique pour vous permettre de g\u00e9rer facilement les diff\u00e9rents types d'erreurs qui peuvent se produire lors des op\u00e9rations avec l'API MVola.</p>"},{"location":"guides/error-handling/#hierarchie-des-exceptions","title":"Hi\u00e9rarchie des exceptions","text":"<pre><code>MVolaError (Exception de base)\n\u251c\u2500\u2500 MVolaAuthError (Erreurs d'authentification)\n\u2502   \u251c\u2500\u2500 MVolaInvalidCredentialsError\n\u2502   \u2514\u2500\u2500 MVolaTokenExpiredError\n\u251c\u2500\u2500 MVolaTransactionError (Erreurs de transaction)\n\u2502   \u251c\u2500\u2500 MVolaTransactionValidationError\n\u2502   \u251c\u2500\u2500 MVolaTransactionStatusError\n\u2502   \u2514\u2500\u2500 MVolaTransactionCreationError\n\u251c\u2500\u2500 MVolaValidationError (Erreurs de validation)\n\u2502   \u2514\u2500\u2500 MVolaInvalidParameterError\n\u251c\u2500\u2500 MVolaConnectionError (Erreurs de connexion)\n\u2502   \u251c\u2500\u2500 MVolaRequestTimeoutError\n\u2502   \u2514\u2500\u2500 MVolaServerError\n\u2514\u2500\u2500 MVolaConfigError (Erreurs de configuration)\n</code></pre> <p>Cette hi\u00e9rarchie vous permet de capturer des erreurs \u00e0 diff\u00e9rents niveaux de sp\u00e9cificit\u00e9 selon vos besoins.</p>"},{"location":"guides/error-handling/#importation-des-exceptions","title":"Importation des exceptions","text":"<pre><code>from mvola_api.exceptions import (\n    MVolaError,                    # Exception de base\n    MVolaAuthError,                # Erreurs d'authentification\n    MVolaInvalidCredentialsError,  # Identifiants invalides\n    MVolaTokenExpiredError,        # Token expir\u00e9\n    MVolaTransactionError,         # Erreurs de transaction\n    MVolaTransactionValidationError, # Validation de transaction\n    MVolaTransactionStatusError,   # Erreur de statut\n    MVolaTransactionCreationError, # Cr\u00e9ation de transaction\n    MVolaValidationError,          # Erreurs de validation\n    MVolaInvalidParameterError,    # Param\u00e8tre invalide\n    MVolaConnectionError,          # Erreurs de connexion\n    MVolaRequestTimeoutError,      # Timeout\n    MVolaServerError,              # Erreur serveur\n    MVolaConfigError               # Erreurs de configuration\n)\n</code></pre>"},{"location":"guides/error-handling/#gestion-basique-des-erreurs","title":"Gestion basique des erreurs","text":"<p>La fa\u00e7on la plus simple de g\u00e9rer les erreurs est d'utiliser un bloc try/except pour capturer toutes les erreurs MVola :</p> <pre><code>from mvola_api import MVolaClient\nfrom mvola_api.exceptions import MVolaError\n\ntry:\n    # Initialiser le client\n    client = MVolaClient(\n        consumer_key=\"votre_consumer_key\",\n        consumer_secret=\"votre_consumer_secret\",\n        partner_name=\"Nom de votre application\",\n        partner_msisdn=\"0343500003\",\n        sandbox=True\n    )\n\n    # Initier un paiement\n    transaction_info = client.initiate_payment(\n        amount=1000,\n        debit_msisdn=\"0343500003\",\n        credit_msisdn=\"0343500004\",\n        reference=\"REF123456\",\n        description=\"Paiement test\"\n    )\n\n    print(f\"Transaction initi\u00e9e avec succ\u00e8s: {transaction_info}\")\n\nexcept MVolaError as e:\n    print(f\"Une erreur MVola s'est produite: {e}\")\n    # G\u00e9rer l'erreur (journalisation, notification, etc.)\n</code></pre>"},{"location":"guides/error-handling/#gestion-avancee-des-erreurs","title":"Gestion avanc\u00e9e des erreurs","text":"<p>Pour une gestion plus pr\u00e9cise, vous pouvez capturer des types d'exceptions sp\u00e9cifiques :</p> <pre><code>from mvola_api import MVolaClient\nfrom mvola_api.exceptions import (\n    MVolaInvalidCredentialsError,\n    MVolaTransactionValidationError,\n    MVolaConnectionError,\n    MVolaError\n)\n\ntry:\n    # Initialiser le client\n    client = MVolaClient(\n        consumer_key=\"votre_consumer_key\",\n        consumer_secret=\"votre_consumer_secret\",\n        partner_name=\"Nom de votre application\",\n        partner_msisdn=\"0343500003\",\n        sandbox=True\n    )\n\n    # Initier un paiement\n    transaction_info = client.initiate_payment(\n        amount=1000,\n        debit_msisdn=\"0343500003\",\n        credit_msisdn=\"0343500004\",\n        reference=\"REF123456\",\n        description=\"Paiement test\"\n    )\n\n    print(f\"Transaction initi\u00e9e avec succ\u00e8s: {transaction_info}\")\n\nexcept MVolaInvalidCredentialsError as e:\n    print(f\"Identifiants invalides: {e}\")\n    # Sugg\u00e9rer de v\u00e9rifier les identifiants API\n\nexcept MVolaTransactionValidationError as e:\n    print(f\"Donn\u00e9es de transaction invalides: {e}\")\n    # Afficher des messages d'erreur sp\u00e9cifiques aux champs\n\nexcept MVolaConnectionError as e:\n    print(f\"Erreur de connexion: {e}\")\n    # Sugg\u00e9rer de v\u00e9rifier la connexion Internet ou de r\u00e9essayer plus tard\n\nexcept MVolaError as e:\n    print(f\"Autre erreur MVola: {e}\")\n    # G\u00e9rer les autres erreurs MVola\n\nexcept Exception as e:\n    print(f\"Erreur inattendue: {e}\")\n    # Capturer toute autre erreur non pr\u00e9vue\n</code></pre>"},{"location":"guides/error-handling/#types-derreurs-specifiques","title":"Types d'erreurs sp\u00e9cifiques","text":""},{"location":"guides/error-handling/#erreurs-dauthentification","title":"Erreurs d'authentification","text":"<pre><code>try:\n    # Tenter de g\u00e9n\u00e9rer un token avec des identifiants invalides\n    client.generate_token()\nexcept MVolaInvalidCredentialsError as e:\n    print(f\"Identifiants invalides: {e}\")\n    print(f\"Code d'erreur: {e.error_code}\")\n    # Sugg\u00e9rer de v\u00e9rifier les identifiants ou de g\u00e9n\u00e9rer de nouvelles cl\u00e9s\nexcept MVolaTokenExpiredError as e:\n    print(f\"Token expir\u00e9: {e}\")\n    # Rafra\u00eechir le token et r\u00e9essayer\n    client.refresh_token()\n</code></pre>"},{"location":"guides/error-handling/#erreurs-de-transaction","title":"Erreurs de transaction","text":"<pre><code>try:\n    # Tenter un paiement avec des donn\u00e9es invalides\n    client.initiate_payment(\n        amount=-100,  # Montant n\u00e9gatif (invalide)\n        debit_msisdn=\"0343500003\",\n        credit_msisdn=\"0343500004\",\n        reference=\"REF123456\",\n        description=\"Paiement test\"\n    )\nexcept MVolaTransactionValidationError as e:\n    print(f\"Validation \u00e9chou\u00e9e: {e}\")\n    print(f\"Champ en erreur: {e.field}\")\n    print(f\"D\u00e9tails: {e.details}\")\n    # Afficher un message d'erreur appropri\u00e9 \u00e0 l'utilisateur\n\nexcept MVolaTransactionStatusError as e:\n    print(f\"Erreur de statut: {e}\")\n    print(f\"ID de transaction: {e.transaction_id}\")\n    # Sugg\u00e9rer de v\u00e9rifier l'ID de transaction\n\nexcept MVolaTransactionCreationError as e:\n    print(f\"Erreur lors de la cr\u00e9ation: {e}\")\n    print(f\"D\u00e9tails: {e.details}\")\n    # Sugg\u00e9rer de r\u00e9essayer plus tard\n</code></pre>"},{"location":"guides/error-handling/#erreurs-de-validation","title":"Erreurs de validation","text":"<pre><code>from mvola_api.utils import validate_msisdn\n\ntry:\n    # Valider un num\u00e9ro de t\u00e9l\u00e9phone\n    validate_msisdn(\"abcdef\")  # Format invalide\nexcept MVolaValidationError as e:\n    print(f\"Erreur de validation: {e}\")\n    # Afficher un message d'erreur appropri\u00e9\n</code></pre>"},{"location":"guides/error-handling/#erreurs-de-connexion","title":"Erreurs de connexion","text":"<pre><code>try:\n    # Tenter une op\u00e9ration qui peut \u00e9chouer en raison de probl\u00e8mes r\u00e9seau\n    status = client.get_transaction_status(\n        transaction_id=\"transaction-id-12345\",\n        msisdn=\"0343500003\"\n    )\nexcept MVolaRequestTimeoutError as e:\n    print(f\"D\u00e9lai d'attente d\u00e9pass\u00e9: {e}\")\n    print(f\"URL: {e.url}\")\n    print(f\"Timeout: {e.timeout} secondes\")\n    # Sugg\u00e9rer de r\u00e9essayer plus tard\n\nexcept MVolaServerError as e:\n    print(f\"Erreur serveur MVola: {e}\")\n    print(f\"Code HTTP: {e.status_code}\")\n    print(f\"R\u00e9ponse: {e.response}\")\n    # Sugg\u00e9rer de contacter le support MVola si le probl\u00e8me persiste\n</code></pre>"},{"location":"guides/error-handling/#techniques-de-gestion-des-erreurs","title":"Techniques de gestion des erreurs","text":""},{"location":"guides/error-handling/#approche-hierarchique","title":"Approche hi\u00e9rarchique","text":"<p>Attrapez d'abord les exceptions les plus sp\u00e9cifiques, puis les plus g\u00e9n\u00e9rales :</p> <pre><code>try:\n    # Code utilisant MVola API\nexcept MVolaInvalidCredentialsError as e:\n    # G\u00e9rer les erreurs d'identifiants sp\u00e9cifiquement\n    print(f\"Identifiants invalides: {e}\")\nexcept MVolaAuthError as e:\n    # G\u00e9rer les autres erreurs d'authentification\n    print(f\"Erreur d'authentification: {e}\")\nexcept MVolaTransactionError as e:\n    # G\u00e9rer les erreurs de transaction\n    print(f\"Erreur de transaction: {e}\")\nexcept MVolaError as e:\n    # G\u00e9rer toutes les autres erreurs MVola\n    print(f\"Erreur MVola: {e}\")\nexcept Exception as e:\n    # Attraper toutes les autres exceptions Python\n    print(f\"Erreur inattendue: {e}\")\n</code></pre>"},{"location":"guides/error-handling/#gestion-avec-retries","title":"Gestion avec retries","text":"<p>Pour certaines erreurs temporaires (timeout, erreurs serveur), vous pouvez impl\u00e9menter une strat\u00e9gie de retry :</p> <pre><code>from mvola_api.exceptions import MVolaRequestTimeoutError, MVolaServerError\nimport time\n\nmax_retries = 3\nretry_count = 0\nbackoff_factor = 2  # Pour le backoff exponentiel\n\nwhile retry_count &lt; max_retries:\n    try:\n        # Tenter une op\u00e9ration MVola\n        result = client.initiate_payment(\n            amount=1000,\n            debit_msisdn=\"0343500003\",\n            credit_msisdn=\"0343500004\",\n            reference=\"REF123456\",\n            description=\"Paiement test\"\n        )\n        # Succ\u00e8s, sortir de la boucle\n        break\n\n    except (MVolaRequestTimeoutError, MVolaServerError) as e:\n        # Incr\u00e9menter le compteur de tentatives\n        retry_count += 1\n\n        # Si nous avons atteint le maximum de tentatives, lever l'exception\n        if retry_count &gt;= max_retries:\n            print(f\"\u00c9chec apr\u00e8s {max_retries} tentatives: {e}\")\n            raise\n\n        # Calculer le temps d'attente avec backoff exponentiel\n        wait_time = backoff_factor ** retry_count\n        print(f\"Erreur temporaire: {e}. Nouvelle tentative dans {wait_time}s...\")\n\n        # Attendre avant de r\u00e9essayer\n        time.sleep(wait_time)\n</code></pre>"},{"location":"guides/error-handling/#validation-preventive","title":"Validation pr\u00e9ventive","text":"<p>Pour \u00e9viter certaines exceptions, validez vos donn\u00e9es avant d'appeler l'API :</p> <pre><code>from mvola_api.utils import validate_msisdn, validate_required_params\n\n# Donn\u00e9es \u00e0 valider\npayment_data = {\n    \"amount\": 1000,\n    \"debit_msisdn\": \"0343500003\",\n    \"credit_msisdn\": \"0343500004\",\n    \"reference\": \"REF123456\",\n    \"description\": \"Paiement test\"\n}\n\n# Param\u00e8tres requis\nrequired_params = [\"amount\", \"debit_msisdn\", \"credit_msisdn\", \"reference\", \"description\"]\n\ntry:\n    # Valider que tous les param\u00e8tres requis sont pr\u00e9sents\n    validate_required_params(payment_data, required_params)\n\n    # Valider les num\u00e9ros de t\u00e9l\u00e9phone\n    validate_msisdn(payment_data[\"debit_msisdn\"])\n    validate_msisdn(payment_data[\"credit_msisdn\"])\n\n    # Valider le montant\n    if payment_data[\"amount\"] &lt;= 0:\n        raise MVolaValidationError(\"Le montant doit \u00eatre positif\")\n\n    # Si toutes les validations passent, initier le paiement\n    transaction_info = client.initiate_payment(**payment_data)\n\nexcept MVolaValidationError as e:\n    # G\u00e9rer les erreurs de validation\n    print(f\"Erreur de validation: {e}\")\n</code></pre>"},{"location":"guides/error-handling/#journalisation-des-erreurs","title":"Journalisation des erreurs","text":"<p>Il est recommand\u00e9 de journaliser les erreurs pour faciliter le d\u00e9bogage :</p> <pre><code>import logging\n\n# Configurer le logger\nlogger = logging.getLogger(\"mvola\")\nlogger.setLevel(logging.DEBUG)\n\n# Ajouter un handler pour \u00e9crire dans un fichier\nfile_handler = logging.FileHandler(\"mvola_errors.log\")\nfile_handler.setFormatter(logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"))\nlogger.addHandler(file_handler)\n\ntry:\n    # Code utilisant MVola API\n    result = client.initiate_payment(...)\nexcept MVolaError as e:\n    # Journaliser l'erreur avec les d\u00e9tails appropri\u00e9s\n    logger.error(f\"Erreur MVola: {e}\", exc_info=True)\n    logger.error(f\"D\u00e9tails: {e.details if hasattr(e, 'details') else 'Pas de d\u00e9tails'}\")\n\n    # Vous pouvez \u00e9galement inclure des informations contextuelles\n    logger.error(f\"Contexte: initiation de paiement pour la r\u00e9f\u00e9rence {reference}\")\n\n    # R\u00e9pondre \u00e0 l'utilisateur avec un message appropri\u00e9\n    print(\"Une erreur s'est produite lors du traitement de votre paiement. Veuillez r\u00e9essayer plus tard.\")\n</code></pre>"},{"location":"guides/error-handling/#messages-derreur-conviviaux","title":"Messages d'erreur conviviaux","text":"<p>Transformez les erreurs techniques en messages compr\u00e9hensibles pour l'utilisateur final :</p> <pre><code>def get_user_friendly_message(exception):\n    \"\"\"Convertit une exception MVola en message utilisateur convivial\"\"\"\n\n    if isinstance(exception, MVolaInvalidCredentialsError):\n        return \"Impossible de se connecter au service MVola. Veuillez contacter le support.\"\n\n    elif isinstance(exception, MVolaTokenExpiredError):\n        return \"Votre session a expir\u00e9. Veuillez rafra\u00eechir la page et r\u00e9essayer.\"\n\n    elif isinstance(exception, MVolaTransactionValidationError):\n        if getattr(exception, 'field', '') == 'amount':\n            return \"Le montant sp\u00e9cifi\u00e9 n'est pas valide. Veuillez v\u00e9rifier et r\u00e9essayer.\"\n        elif getattr(exception, 'field', '') in ['debit_msisdn', 'credit_msisdn']:\n            return \"Le num\u00e9ro de t\u00e9l\u00e9phone fourni n'est pas valide. Veuillez v\u00e9rifier et r\u00e9essayer.\"\n        else:\n            return \"Certaines informations de paiement ne sont pas valides. Veuillez v\u00e9rifier et r\u00e9essayer.\"\n\n    elif isinstance(exception, MVolaTransactionStatusError):\n        return \"Impossible de v\u00e9rifier le statut de la transaction. Veuillez r\u00e9essayer plus tard.\"\n\n    elif isinstance(exception, MVolaConnectionError):\n        return \"Probl\u00e8me de connexion au service MVola. Veuillez v\u00e9rifier votre connexion Internet et r\u00e9essayer.\"\n\n    elif isinstance(exception, MVolaError):\n        return \"Une erreur s'est produite lors du traitement de votre paiement. Veuillez r\u00e9essayer plus tard.\"\n\n    else:\n        return \"Une erreur inattendue s'est produite. Veuillez r\u00e9essayer plus tard.\"\n\n# Exemple d'utilisation\ntry:\n    # Code utilisant MVola API\n    result = client.initiate_payment(...)\nexcept Exception as e:\n    # Journaliser l'erreur technique d\u00e9taill\u00e9e\n    logger.error(f\"Erreur: {e}\", exc_info=True)\n\n    # Afficher un message convivial \u00e0 l'utilisateur\n    user_message = get_user_friendly_message(e)\n    print(user_message)\n</code></pre>"},{"location":"guides/error-handling/#bonnes-pratiques-pour-la-gestion-des-erreurs","title":"Bonnes pratiques pour la gestion des erreurs","text":"<ol> <li> <p>Utilisez la hi\u00e9rarchie d'exceptions pour capturer les erreurs \u00e0 diff\u00e9rents niveaux de sp\u00e9cificit\u00e9.</p> </li> <li> <p>Validez les donn\u00e9es en amont pour \u00e9viter les erreurs pr\u00e9visibles.</p> </li> <li> <p>Impl\u00e9mentez des retries pour les erreurs temporaires, avec un backoff exponentiel.</p> </li> <li> <p>Journalisez les erreurs avec suffisamment de contexte pour faciliter le d\u00e9bogage.</p> </li> <li> <p>Pr\u00e9sentez des messages d'erreur conviviaux \u00e0 l'utilisateur final, sans exposer les d\u00e9tails techniques.</p> </li> <li> <p>Testez vos sc\u00e9narios d'erreur pour vous assurer que votre application les g\u00e8re correctement.</p> </li> <li> <p>Mettez en place une surveillance pour \u00eatre alert\u00e9 des erreurs r\u00e9currentes.</p> </li> </ol>"},{"location":"guides/error-handling/#exemple-complet","title":"Exemple complet","text":"<p>Voici un exemple complet combinant plusieurs techniques de gestion des erreurs :</p> <pre><code>import time\nimport logging\nfrom mvola_api import MVolaClient\nfrom mvola_api.exceptions import (\n    MVolaInvalidCredentialsError,\n    MVolaTokenExpiredError,\n    MVolaTransactionValidationError,\n    MVolaConnectionError,\n    MVolaRequestTimeoutError,\n    MVolaServerError,\n    MVolaError\n)\n\n# Configuration du logging\nlogger = logging.getLogger(\"mvola\")\nlogger.setLevel(logging.DEBUG)\nhandler = logging.FileHandler(\"mvola.log\")\nhandler.setFormatter(logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"))\nlogger.addHandler(handler)\n\ndef process_payment(amount, debit_msisdn, credit_msisdn, description):\n    \"\"\"\n    Traite un paiement MVola avec une gestion compl\u00e8te des erreurs.\n\n    Args:\n        amount: Montant du paiement\n        debit_msisdn: Num\u00e9ro du payeur\n        credit_msisdn: Num\u00e9ro du b\u00e9n\u00e9ficiaire\n        description: Description du paiement\n\n    Returns:\n        dict: R\u00e9sultat de la transaction ou information d'erreur\n    \"\"\"\n    # G\u00e9n\u00e9rer une r\u00e9f\u00e9rence unique\n    from mvola_api.utils import generate_reference\n    reference = generate_reference(prefix=\"PAY\")\n\n    # Initialiser le client\n    try:\n        client = MVolaClient(\n            consumer_key=\"votre_consumer_key\",\n            consumer_secret=\"votre_consumer_secret\",\n            partner_name=\"Nom de votre application\",\n            partner_msisdn=\"0343500003\",\n            sandbox=True,\n            logger=logger\n        )\n    except MVolaInvalidCredentialsError as e:\n        logger.error(f\"Erreur d'initialisation - identifiants invalides: {e}\")\n        return {\"success\": False, \"message\": \"Configuration incorrecte du service de paiement\"}\n    except MVolaError as e:\n        logger.error(f\"Erreur d'initialisation: {e}\")\n        return {\"success\": False, \"message\": \"Impossible d'initialiser le service de paiement\"}\n\n    # Validation des donn\u00e9es\n    try:\n        from mvola_api.utils import validate_msisdn\n        validate_msisdn(debit_msisdn)\n        validate_msisdn(credit_msisdn)\n\n        if amount &lt;= 0:\n            raise MVolaTransactionValidationError(\"Le montant doit \u00eatre positif\", field=\"amount\")\n    except MVolaTransactionValidationError as e:\n        logger.error(f\"Validation \u00e9chou\u00e9e: {e}\")\n        if e.field == \"amount\":\n            return {\"success\": False, \"message\": \"Le montant sp\u00e9cifi\u00e9 n'est pas valide\"}\n        else:\n            return {\"success\": False, \"message\": \"Le num\u00e9ro de t\u00e9l\u00e9phone fourni n'est pas valide\"}\n\n    # Initier le paiement avec retry pour les erreurs temporaires\n    max_retries = 3\n    retry_count = 0\n\n    while retry_count &lt; max_retries:\n        try:\n            transaction_info = client.initiate_payment(\n                amount=amount,\n                debit_msisdn=debit_msisdn,\n                credit_msisdn=credit_msisdn,\n                reference=reference,\n                description=description\n            )\n\n            # Transaction initi\u00e9e avec succ\u00e8s\n            transaction_id = transaction_info.get('server_correlation_id')\n            logger.info(f\"Transaction initi\u00e9e avec succ\u00e8s. ID: {transaction_id}\")\n\n            # V\u00e9rification du statut initial\n            status_info = client.get_transaction_status(\n                transaction_id=transaction_id,\n                msisdn=debit_msisdn\n            )\n\n            return {\n                \"success\": True,\n                \"transaction_id\": transaction_id,\n                \"reference\": reference,\n                \"status\": status_info.get('status'),\n                \"message\": \"Transaction initi\u00e9e avec succ\u00e8s\"\n            }\n\n        except (MVolaRequestTimeoutError, MVolaServerError) as e:\n            # Erreurs temporaires - impl\u00e9menter retry\n            retry_count += 1\n            wait_time = 2 ** retry_count\n\n            logger.warning(f\"Erreur temporaire: {e}. Tentative {retry_count}/{max_retries} dans {wait_time}s\")\n\n            if retry_count &gt;= max_retries:\n                logger.error(f\"\u00c9chec apr\u00e8s {max_retries} tentatives: {e}\")\n                return {\"success\": False, \"message\": \"Le service de paiement est temporairement indisponible\"}\n\n            time.sleep(wait_time)\n\n        except MVolaTokenExpiredError as e:\n            # Token expir\u00e9 - rafra\u00eechir et r\u00e9essayer\n            logger.warning(f\"Token expir\u00e9: {e}\")\n            try:\n                client.refresh_token()\n                # Continuer la boucle pour r\u00e9essayer\n            except MVolaError as e:\n                logger.error(f\"Erreur lors du rafra\u00eechissement du token: {e}\")\n                return {\"success\": False, \"message\": \"Erreur d'authentification avec le service de paiement\"}\n\n        except MVolaTransactionValidationError as e:\n            # Erreur de validation - pas de retry\n            logger.error(f\"Validation \u00e9chou\u00e9e: {e}\")\n            if e.field == \"amount\":\n                return {\"success\": False, \"message\": \"Le montant sp\u00e9cifi\u00e9 n'est pas valide\"}\n            elif e.field in [\"debit_msisdn\", \"credit_msisdn\"]:\n                return {\"success\": False, \"message\": \"Le num\u00e9ro de t\u00e9l\u00e9phone fourni n'est pas valide\"}\n            else:\n                return {\"success\": False, \"message\": \"Certaines informations de paiement ne sont pas valides\"}\n\n        except MVolaConnectionError as e:\n            # Erreur de connexion\n            logger.error(f\"Erreur de connexion: {e}\")\n            return {\"success\": False, \"message\": \"Probl\u00e8me de connexion au service MVola\"}\n\n        except MVolaError as e:\n            # Autres erreurs MVola\n            logger.error(f\"Erreur MVola: {e}\")\n            return {\"success\": False, \"message\": \"Une erreur s'est produite lors du traitement de votre paiement\"}\n\n        except Exception as e:\n            # Erreur inattendue\n            logger.error(f\"Erreur inattendue: {e}\", exc_info=True)\n            return {\"success\": False, \"message\": \"Une erreur inattendue s'est produite\"}\n\n    # Ne devrait jamais atteindre ce point \u00e0 cause des returns dans la boucle\n    return {\"success\": False, \"message\": \"Erreur inattendue lors du traitement du paiement\"}\n\n# Exemple d'utilisation\nresult = process_payment(\n    amount=1000,\n    debit_msisdn=\"0343500003\",\n    credit_msisdn=\"0343500004\",\n    description=\"Paiement test\"\n)\n\nif result[\"success\"]:\n    print(f\"Paiement en cours: {result['transaction_id']}\")\n    print(f\"Statut: {result['status']}\")\nelse:\n    print(f\"Erreur: {result['message']}\")\n</code></pre>"},{"location":"guides/error-handling/#voir-aussi","title":"Voir aussi","text":"<ul> <li>R\u00e9f\u00e9rence des exceptions - Documentation technique d\u00e9taill\u00e9e de toutes les exceptions</li> <li>Guide d'authentification - Comment g\u00e9rer l'authentification</li> <li>Guide des transactions - Comment effectuer des transactions</li> <li>Exemples d'utilisation basique - Exemples simples d'utilisation de la biblioth\u00e8que</li> </ul>"},{"location":"guides/error-handling/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<ul> <li>Consultez le guide des transactions pour en savoir plus sur l'initiation des paiements</li> <li>Explorez les exemples d'int\u00e9gration web pour voir comment g\u00e9rer les erreurs dans un contexte d'application web </li> </ul>"},{"location":"guides/installation/","title":"Installation","text":"<p>Ce guide vous aidera \u00e0 installer la biblioth\u00e8que MVola API dans votre environnement Python.</p>"},{"location":"guides/installation/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Python 3.7 ou sup\u00e9rieur</li> <li>pip (gestionnaire de paquets Python)</li> <li>Un compte d\u00e9veloppeur MVola avec des cl\u00e9s d'API (pour l'utilisation r\u00e9elle)</li> </ul>"},{"location":"guides/installation/#installation-depuis-pypi","title":"Installation depuis PyPI","text":"<p>La m\u00e9thode recommand\u00e9e est d'installer la biblioth\u00e8que directement depuis PyPI :</p> <pre><code>pip install mvola-api\n</code></pre> <p>Pour installer une version sp\u00e9cifique :</p> <pre><code>pip install mvola-api==1.0.0\n</code></pre>"},{"location":"guides/installation/#installation-avec-les-extras","title":"Installation avec les extras","text":"<p>Vous pouvez installer des d\u00e9pendances suppl\u00e9mentaires en fonction de vos besoins :</p> <pre><code># Pour le d\u00e9veloppement (tests, formatage, etc.)\npip install mvola-api[dev]\n\n# Pour g\u00e9n\u00e9rer la documentation\npip install mvola-api[docs]\n\n# Pour ex\u00e9cuter les exemples\npip install mvola-api[examples]\n\n# Pour tout installer\npip install mvola-api[dev,docs,examples]\n</code></pre>"},{"location":"guides/installation/#installation-depuis-les-sources","title":"Installation depuis les sources","text":"<p>Pour installer la derni\u00e8re version de d\u00e9veloppement depuis GitHub :</p> <pre><code>git clone https://github.com/Niainarisoa01/Mvlola_API_Lib.git\ncd Mvlola_API_Lib\npip install -e .\n</code></pre>"},{"location":"guides/installation/#verification-de-linstallation","title":"V\u00e9rification de l'installation","text":"<p>Vous pouvez v\u00e9rifier que l'installation a r\u00e9ussi en important la biblioth\u00e8que dans Python :</p> <pre><code>import mvola_api\nprint(mvola_api.__version__)\n</code></pre>"},{"location":"guides/installation/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<p>Apr\u00e8s l'installation, consultez le guide d'authentification pour apprendre \u00e0 configurer l'authentification avec l'API MVola. </p>"},{"location":"guides/transactions/","title":"Transactions","text":"<p>Ce guide explique comment effectuer des transactions avec la biblioth\u00e8que MVola API. Apr\u00e8s avoir configur\u00e9 l'authentification, vous pourrez initier des paiements, v\u00e9rifier leur statut et r\u00e9cup\u00e9rer les d\u00e9tails des transactions.</p>"},{"location":"guides/transactions/#concepts-de-base","title":"Concepts de base","text":"<p>Dans le syst\u00e8me MVola, une transaction se compose g\u00e9n\u00e9ralement de ces \u00e9l\u00e9ments essentiels :</p> <ul> <li>Montant : Le montant \u00e0 transf\u00e9rer</li> <li>MSISDN d\u00e9biteur : Le num\u00e9ro de t\u00e9l\u00e9phone qui effectue le paiement</li> <li>MSISDN cr\u00e9diteur : Le num\u00e9ro de t\u00e9l\u00e9phone qui re\u00e7oit le paiement</li> <li>R\u00e9f\u00e9rence : Une r\u00e9f\u00e9rence unique pour identifier la transaction</li> <li>URL de callback (optionnel) : Une URL pour recevoir des notifications sur le statut de la transaction</li> </ul>"},{"location":"guides/transactions/#initier-un-paiement","title":"Initier un paiement","text":"<p>La m\u00e9thode <code>initiate_payment()</code> de <code>MVolaTransaction</code> vous permet d'initier un paiement. Voici un exemple :</p> <pre><code>from mvola_api import MVolaClient\n\n# Initialisation du client\nclient = MVolaClient(\n    consumer_key=\"votre_consumer_key\",\n    consumer_secret=\"votre_consumer_secret\",\n    partner_name=\"NOM_DU_PARTENAIRE\",\n    partner_msisdn=\"0343500003\",\n    sandbox=True  # Utiliser False pour l'environnement de production\n)\n\n# Informations de transaction\npayment_data = {\n    \"amount\": 1000,\n    \"debit_msisdn\": \"0343500003\",  # Num\u00e9ro qui paie\n    \"credit_msisdn\": \"0343500004\",  # Num\u00e9ro qui re\u00e7oit\n    \"reference\": \"REF123456\",  # R\u00e9f\u00e9rence unique\n    \"description\": \"Paiement pour produit ABC\"\n}\n\n# Initier le paiement\ntry:\n    transaction_info = client.initiate_payment(\n        **payment_data,\n        callback_url=\"https://example.com/callback\"  # Optionnel\n    )\n\n    # R\u00e9cup\u00e9rer l'ID de la transaction pour un suivi ult\u00e9rieur\n    transaction_id = transaction_info.get('server_correlation_id')\n    print(f\"Paiement initi\u00e9 avec succ\u00e8s. ID de transaction: {transaction_id}\")\n\nexcept Exception as e:\n    print(f\"Erreur lors de l'initiation du paiement: {e}\")\n</code></pre>"},{"location":"guides/transactions/#verifier-le-statut-dune-transaction","title":"V\u00e9rifier le statut d'une transaction","text":"<p>Apr\u00e8s avoir initi\u00e9 un paiement, vous pouvez v\u00e9rifier son statut \u00e0 l'aide de la m\u00e9thode <code>get_transaction_status()</code> :</p> <pre><code>try:\n    status_info = client.get_transaction_status(\n        transaction_id=transaction_id,\n        msisdn=\"0343500003\"  # MSISDN du compte partenaire\n    )\n\n    print(f\"Statut de la transaction: {status_info.get('status')}\")\n\nexcept Exception as e:\n    print(f\"Erreur lors de la v\u00e9rification du statut: {e}\")\n</code></pre>"},{"location":"guides/transactions/#recuperer-les-details-dune-transaction","title":"R\u00e9cup\u00e9rer les d\u00e9tails d'une transaction","text":"<p>Vous pouvez r\u00e9cup\u00e9rer les d\u00e9tails d'une transaction \u00e0 l'aide de la m\u00e9thode <code>get_transaction_details()</code> :</p> <pre><code>try:\n    transaction_details = client.get_transaction_details(\n        transaction_id=transaction_id\n    )\n\n    print(f\"D\u00e9tails de la transaction: {transaction_details}\")\n\nexcept Exception as e:\n    print(f\"Erreur lors de la r\u00e9cup\u00e9ration des d\u00e9tails: {e}\")\n</code></pre>"},{"location":"guides/transactions/#gestion-des-erreurs","title":"Gestion des erreurs","text":"<p>Lors du traitement des transactions, plusieurs types d'erreurs peuvent survenir. La biblioth\u00e8que MVola API fournit des exceptions sp\u00e9cifiques pour vous aider \u00e0 les g\u00e9rer :</p> <pre><code>from mvola_api.exceptions import (\n    MVolaTransactionError,\n    MVolaValidationError,\n    MVolaConnectionError\n)\n\ntry:\n    transaction_info = client.initiate_payment(**payment_data)\n\nexcept MVolaValidationError as e:\n    print(f\"Erreur de validation: {e}\")\n    # G\u00e9rer les erreurs de validation des donn\u00e9es\n\nexcept MVolaTransactionError as e:\n    print(f\"Erreur de transaction: {e}\")\n    # G\u00e9rer les erreurs sp\u00e9cifiques aux transactions\n\nexcept MVolaConnectionError as e:\n    print(f\"Erreur de connexion: {e}\")\n    # G\u00e9rer les probl\u00e8mes de connexion \u00e0 l'API\n\nexcept Exception as e:\n    print(f\"Erreur inattendue: {e}\")\n    # G\u00e9rer toute autre erreur inattendue\n</code></pre>"},{"location":"guides/transactions/#meilleures-pratiques","title":"Meilleures pratiques","text":"<ol> <li>G\u00e9n\u00e9rez des r\u00e9f\u00e9rences uniques pour chaque transaction.</li> <li>Stockez les IDs de transaction retourn\u00e9s par l'API pour un suivi ult\u00e9rieur.</li> <li>Impl\u00e9mentez un syst\u00e8me de retry pour v\u00e9rifier le statut des transactions jusqu'\u00e0 ce qu'elles soient termin\u00e9es.</li> <li>Utilisez des webhooks pour \u00eatre notifi\u00e9 des changements de statut des transactions plut\u00f4t que de faire des sondages r\u00e9p\u00e9t\u00e9s.</li> </ol>"},{"location":"guides/transactions/#exemple-complet-de-flux-de-paiement","title":"Exemple complet de flux de paiement","text":"<p>Voici un exemple complet qui combine l'initiation d'un paiement, la v\u00e9rification du statut et la r\u00e9cup\u00e9ration des d\u00e9tails :</p> <pre><code>import time\nfrom mvola_api import MVolaClient\nfrom mvola_api.exceptions import MVolaTransactionError\n\n# Initialisation du client\nclient = MVolaClient(\n    consumer_key=\"votre_consumer_key\",\n    consumer_secret=\"votre_consumer_secret\",\n    partner_name=\"NOM_DU_PARTENAIRE\",\n    partner_msisdn=\"0343500003\",\n    sandbox=True\n)\n\n# Informations de transaction\npayment_data = {\n    \"amount\": 1000,\n    \"debit_msisdn\": \"0343500003\",\n    \"credit_msisdn\": \"0343500004\",\n    \"reference\": \"REF123456\",\n    \"description\": \"Paiement pour produit ABC\"\n}\n\ndef process_payment():\n    try:\n        # Initier le paiement\n        transaction_info = client.initiate_payment(**payment_data)\n        transaction_id = transaction_info.get('server_correlation_id')\n        print(f\"Paiement initi\u00e9 avec succ\u00e8s. ID: {transaction_id}\")\n\n        # V\u00e9rifier le statut (avec des tentatives)\n        max_attempts = 5\n        attempts = 0\n        status = None\n\n        while attempts &lt; max_attempts:\n            status_info = client.get_transaction_status(\n                transaction_id=transaction_id,\n                msisdn=\"0343500003\"\n            )\n            status = status_info.get('status')\n            print(f\"Statut actuel: {status}\")\n\n            if status.lower() == 'completed':\n                # R\u00e9cup\u00e9rer les d\u00e9tails de la transaction\n                details = client.get_transaction_details(transaction_id=transaction_id)\n                print(f\"Transaction r\u00e9ussie! D\u00e9tails: {details}\")\n                return True\n            elif status.lower() in ['failed', 'cancelled', 'rejected']:\n                print(f\"La transaction a \u00e9chou\u00e9 avec le statut: {status}\")\n                return False\n\n            attempts += 1\n            # Attendre avant de v\u00e9rifier \u00e0 nouveau\n            time.sleep(5)\n\n        print(\"Nombre maximum de tentatives atteint\")\n        return False\n\n    except MVolaTransactionError as e:\n        print(f\"Erreur de transaction: {e}\")\n        return False\n    except Exception as e:\n        print(f\"Erreur inattendue: {e}\")\n        return False\n\n# Ex\u00e9cuter le processus de paiement\nresult = process_payment()\nprint(f\"R\u00e9sultat du paiement: {'Succ\u00e8s' if result else '\u00c9chec'}\")\n</code></pre>"},{"location":"guides/transactions/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<p>Consultez le guide Gestion des erreurs pour apprendre \u00e0 g\u00e9rer efficacement les erreurs qui peuvent survenir lors des transactions, ou le guide Int\u00e9gration web pour voir comment int\u00e9grer les paiements MVola dans une application web. </p>"}]}